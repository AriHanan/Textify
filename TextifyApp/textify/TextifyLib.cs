using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;

/// <summary>
/// TextifyLib is a text library that converts text to typefaces (fonts) that you can use in every chat app using Unicode and LaTeX technologies.
/// </summary>
namespace TextifyLib
{
    /// <summary>
    /// A list of Unicode character sets which you can convert text into.
    /// </summary>
    public class Typefaces
    {
        //`1234567890-=~!@#$%^&*()_+qwertyuiopasdfghjklzxcvbnm[];'\,./QWERTYUIOPASDFGHJKLZXCVBNM{}:"|<>?
        /// <summary>
        /// 𝐓𝐡𝐞 𝐪𝐮𝐢𝐜𝐤 𝐛𝐫𝐨𝐰𝐧 𝐟𝐨𝐱 𝐣𝐮𝐦𝐩𝐬 𝐨𝐯𝐞𝐫 𝐭𝐡𝐞 𝐥𝐚𝐳𝐲 𝐝𝐨𝐠.
        /// </summary>
        public static readonly Face CharSerifBold       = new Face(new Dictionary<char, string>() {
            { '1', "𝟏" },
            { '2', "𝟐" },
            { '3', "𝟑" },
            { '4', "𝟒" },
            { '5', "𝟓" },
            { '6', "𝟔" },
            { '7', "𝟕" },
            { '8', "𝟖" },
            { '9', "𝟗" },
            { '0', "𝟎" },
            { 'q', "𝐪" },
            { 'w', "𝐰" },
            { 'e', "𝐞" },
            { 'r', "𝐫" },
            { 't', "𝐭" },
            { 'y', "𝐲" },
            { 'u', "𝐮" },
            { 'i', "𝐢" },
            { 'o', "𝐨" },
            { 'p', "𝐩" },
            { 'a', "𝐚" },
            { 's', "𝐬" },
            { 'd', "𝐝" },
            { 'f', "𝐟" },
            { 'g', "𝐠" },
            { 'h', "𝐡" },
            { 'j', "𝐣" },
            { 'k', "𝐤" },
            { 'l', "𝐥" },
            { 'z', "𝐳" },
            { 'x', "𝐱" },
            { 'c', "𝐜" },
            { 'v', "𝐯" },
            { 'b', "𝐛" },
            { 'n', "𝐧" },
            { 'm', "𝐦" },
            { 'Q', "𝐐" },
            { 'W', "𝐖" },
            { 'E', "𝐄" },
            { 'R', "𝐑" },
            { 'T', "𝐓" },
            { 'Y', "𝐘" },
            { 'U', "𝐔" },
            { 'I', "𝐈" },
            { 'O', "𝐎" },
            { 'P', "𝐏" },
            { 'A', "𝐀" },
            { 'S', "𝐒" },
            { 'D', "𝐃" },
            { 'F', "𝐅" },
            { 'G', "𝐆" },
            { 'H', "𝐇" },
            { 'J', "𝐉" },
            { 'K', "𝐊" },
            { 'L', "𝐋" },
            { 'Z', "𝐙" },
            { 'X', "𝐗" },
            { 'C', "𝐂" },
            { 'V', "𝐕" },
            { 'B', "𝐁" },
            { 'N', "𝐍" },
            { 'M', "𝐌" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝑇ℎ𝑒 𝑞𝑢𝑖𝑐𝑘 𝑏𝑟𝑜𝑤𝑛 𝑓𝑜𝑥 𝑗𝑢𝑚𝑝𝑠 𝑜𝑣𝑒𝑟 𝑡ℎ𝑒 𝑙𝑎𝑧𝑦 𝑑𝑜𝑔.
        /// </summary>
        public static readonly Face CharSerifItalic     = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟷" },
            { '2', "𝟸" },
            { '3', "𝟹" },
            { '4', "𝟺" },
            { '5', "𝟻" },
            { '6', "𝟼" },
            { '7', "𝟽" },
            { '8', "𝟾" },
            { '9', "𝟿" },
            { '0', "𝟶" },
            { 'q', "𝑞" },
            { 'w', "𝑤" },
            { 'e', "𝑒" },
            { 'r', "𝑟" },
            { 't', "𝑡" },
            { 'y', "𝑦" },
            { 'u', "𝑢" },
            { 'i', "𝑖" },
            { 'o', "𝑜" },
            { 'p', "𝑝" },
            { 'a', "𝑎" },
            { 's', "𝑠" },
            { 'd', "𝑑" },
            { 'f', "𝑓" },
            { 'g', "𝑔" },
            { 'h', "ℎ" },
            { 'j', "𝑗" },
            { 'k', "𝑘" },
            { 'l', "𝑙" },
            { 'z', "𝑧" },
            { 'x', "𝑥" },
            { 'c', "𝑐" },
            { 'v', "𝑣" },
            { 'b', "𝑏" },
            { 'n', "𝑛" },
            { 'm', "𝑚" },
            { 'Q', "𝑄" },
            { 'W', "𝑊" },
            { 'E', "𝐸" },
            { 'R', "𝑅" },
            { 'T', "𝑇" },
            { 'Y', "𝑌" },
            { 'U', "𝑈" },
            { 'I', "𝐼" },
            { 'O', "𝑂" },
            { 'P', "𝑃" },
            { 'A', "𝐴" },
            { 'S', "𝑆" },
            { 'D', "𝐷" },
            { 'F', "𝐹" },
            { 'G', "𝐺" },
            { 'H', "𝐻" },
            { 'J', "𝐽" },
            { 'K', "𝐾" },
            { 'L', "𝐿" },
            { 'Z', "𝑍" },
            { 'X', "𝑋" },
            { 'C', "𝐶" },
            { 'V', "𝑉" },
            { 'B', "𝐵" },
            { 'N', "𝑁" },
            { 'M', "𝑀" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝑻𝒉𝒆 𝒒𝒖𝒊𝒄𝒌 𝒃𝒓𝒐𝒘𝒏 𝒇𝒐𝒙 𝒋𝒖𝒎𝒑𝒔 𝒐𝒗𝒆𝒓 𝒕𝒉𝒆 𝒍𝒂𝒛𝒚 𝒅𝒐𝒈.
        /// </summary>
        public static readonly Face CharSerifBoldItalic = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟏" },
            { '2', "𝟐" },
            { '3', "𝟑" },
            { '4', "𝟒" },
            { '5', "𝟓" },
            { '6', "𝟔" },
            { '7', "𝟕" },
            { '8', "𝟖" },
            { '9', "𝟗" },
            { '0', "𝟎" },
            { 'q', "𝒒" },
            { 'w', "𝒘" },
            { 'e', "𝒆" },
            { 'r', "𝒓" },
            { 't', "𝒕" },
            { 'y', "𝒚" },
            { 'u', "𝒖" },
            { 'i', "𝒊" },
            { 'o', "𝒐" },
            { 'p', "𝒑" },
            { 'a', "𝒂" },
            { 's', "𝒔" },
            { 'd', "𝒅" },
            { 'f', "𝒇" },
            { 'g', "𝒈" },
            { 'h', "𝒉" },
            { 'j', "𝒋" },
            { 'k', "𝒌" },
            { 'l', "𝒍" },
            { 'z', "𝒛" },
            { 'x', "𝒙" },
            { 'c', "𝒄" },
            { 'v', "𝒗" },
            { 'b', "𝒃" },
            { 'n', "𝒏" },
            { 'm', "𝒎" },
            { 'Q', "𝑸" },
            { 'W', "𝑾" },
            { 'E', "𝑬" },
            { 'R', "𝑹" },
            { 'T', "𝑻" },
            { 'Y', "𝒀" },
            { 'U', "𝑼" },
            { 'I', "𝑰" },
            { 'O', "𝑶" },
            { 'P', "𝑷" },
            { 'A', "𝑨" },
            { 'S', "𝑺" },
            { 'D', "𝑫" },
            { 'F', "𝑭" },
            { 'G', "𝑮" },
            { 'H', "𝑯" },
            { 'J', "𝑱" },
            { 'K', "𝑲" },
            { 'L', "𝑳" },
            { 'Z', "𝒁" },
            { 'X', "𝑿" },
            { 'C', "𝑪" },
            { 'V', "𝑽" },
            { 'B', "𝑩" },
            { 'N', "𝑵" },
            { 'M', "𝑴" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝖳𝗁𝖾 𝗊𝗎𝗂𝖼𝗄 𝖻𝗋𝗈𝗐𝗇 𝖿𝗈𝗑 𝗃𝗎𝗆𝗉𝗌 𝗈𝗏𝖾𝗋 𝗍𝗁𝖾 𝗅𝖺𝗓𝗒 𝖽𝗈𝗀.
        /// </summary>
        public static readonly Face CharSans            = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟣" },
            { '2', "𝟤" },
            { '3', "𝟥" },
            { '4', "𝟦" },
            { '5', "𝟧" },
            { '6', "𝟨" },
            { '7', "𝟩" },
            { '8', "𝟪" },
            { '9', "𝟫" },
            { '0', "𝟢" },
            { 'q', "𝗊" },
            { 'w', "𝗐" },
            { 'e', "𝖾" },
            { 'r', "𝗋" },
            { 't', "𝗍" },
            { 'y', "𝗒" },
            { 'u', "𝗎" },
            { 'i', "𝗂" },
            { 'o', "𝗈" },
            { 'p', "𝗉" },
            { 'a', "𝖺" },
            { 's', "𝗌" },
            { 'd', "𝖽" },
            { 'f', "𝖿" },
            { 'g', "𝗀" },
            { 'h', "𝗁" },
            { 'j', "𝗃" },
            { 'k', "𝗄" },
            { 'l', "𝗅" },
            { 'z', "𝗓" },
            { 'x', "𝗑" },
            { 'c', "𝖼" },
            { 'v', "𝗏" },
            { 'b', "𝖻" },
            { 'n', "𝗇" },
            { 'm', "𝗆" },
            { 'Q', "𝖰" },
            { 'W', "𝖶" },
            { 'E', "𝖤" },
            { 'R', "𝖱" },
            { 'T', "𝖳" },
            { 'Y', "𝖸" },
            { 'U', "𝖴" },
            { 'I', "𝖨" },
            { 'O', "𝖮" },
            { 'P', "𝖯" },
            { 'A', "𝖠" },
            { 'S', "𝖲" },
            { 'D', "𝖣" },
            { 'F', "𝖥" },
            { 'G', "𝖦" },
            { 'H', "𝖧" },
            { 'J', "𝖩" },
            { 'K', "𝖪" },
            { 'L', "𝖫" },
            { 'Z', "𝖹" },
            { 'X', "𝖷" },
            { 'C', "𝖢" },
            { 'V', "𝖵" },
            { 'B', "𝖡" },
            { 'N', "𝖭" },
            { 'M', "𝖬" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝗧𝗵𝗲 𝗾𝘂𝗶𝗰𝗸 𝗯𝗿𝗼𝘄𝗻 𝗳𝗼𝘅 𝗷𝘂𝗺𝗽𝘀 𝗼𝘃𝗲𝗿 𝘁𝗵𝗲 𝗹𝗮𝘇𝘆 𝗱𝗼𝗴.
        /// </summary>
        public static readonly Face CharSansBold        = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟭" },
            { '2', "𝟮" },
            { '3', "𝟯" },
            { '4', "𝟰" },
            { '5', "𝟱" },
            { '6', "𝟲" },
            { '7', "𝟳" },
            { '8', "𝟴" },
            { '9', "𝟵" },
            { '0', "𝟬" },
            { 'q', "𝗾" },
            { 'w', "𝘄" },
            { 'e', "𝗲" },
            { 'r', "𝗿" },
            { 't', "𝘁" },
            { 'y', "𝘆" },
            { 'u', "𝘂" },
            { 'i', "𝗶" },
            { 'o', "𝗼" },
            { 'p', "𝗽" },
            { 'a', "𝗮" },
            { 's', "𝘀" },
            { 'd', "𝗱" },
            { 'f', "𝗳" },
            { 'g', "𝗴" },
            { 'h', "𝗵" },
            { 'j', "𝗷" },
            { 'k', "𝗸" },
            { 'l', "𝗹" },
            { 'z', "𝘇" },
            { 'x', "𝘅" },
            { 'c', "𝗰" },
            { 'v', "𝘃" },
            { 'b', "𝗯" },
            { 'n', "𝗻" },
            { 'm', "𝗺" },
            { 'Q', "𝗤" },
            { 'W', "𝗪" },
            { 'E', "𝗘" },
            { 'R', "𝗥" },
            { 'T', "𝗧" },
            { 'Y', "𝗬" },
            { 'U', "𝗨" },
            { 'I', "𝗜" },
            { 'O', "𝗢" },
            { 'P', "𝗣" },
            { 'A', "𝗔" },
            { 'S', "𝗦" },
            { 'D', "𝗗" },
            { 'F', "𝗙" },
            { 'G', "𝗚" },
            { 'H', "𝗛" },
            { 'J', "𝗝" },
            { 'K', "𝗞" },
            { 'L', "𝗟" },
            { 'Z', "𝗭" },
            { 'X', "𝗫" },
            { 'C', "𝗖" },
            { 'V', "𝗩" },
            { 'B', "𝗕" },
            { 'N', "𝗡" },
            { 'M', "𝗠" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝘛𝘩𝘦 𝘲𝘶𝘪𝘤𝘬 𝘣𝘳𝘰𝘸𝘯 𝘧𝘰𝘹 𝘫𝘶𝘮𝘱𝘴 𝘰𝘷𝘦𝘳 𝘵𝘩𝘦 𝘭𝘢𝘻𝘺 𝘥𝘰𝘨.
        /// </summary>
        public static readonly Face CharSansItalic      = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟣" },
            { '2', "𝟤" },
            { '3', "𝟥" },
            { '4', "𝟦" },
            { '5', "𝟧" },
            { '6', "𝟨" },
            { '7', "𝟩" },
            { '8', "𝟪" },
            { '9', "𝟫" },
            { '0', "𝟢" },
            { 'q', "𝘲" },
            { 'w', "𝘸" },
            { 'e', "𝘦" },
            { 'r', "𝘳" },
            { 't', "𝘵" },
            { 'y', "𝘺" },
            { 'u', "𝘶" },
            { 'i', "𝘪" },
            { 'o', "𝘰" },
            { 'p', "𝘱" },
            { 'a', "𝘢" },
            { 's', "𝘴" },
            { 'd', "𝘥" },
            { 'f', "𝘧" },
            { 'g', "𝘨" },
            { 'h', "𝘩" },
            { 'j', "𝘫" },
            { 'k', "𝘬" },
            { 'l', "𝘭" },
            { 'z', "𝘻" },
            { 'x', "𝘹" },
            { 'c', "𝘤" },
            { 'v', "𝘷" },
            { 'b', "𝘣" },
            { 'n', "𝘯" },
            { 'm', "𝘮" },
            { 'Q', "𝘘" },
            { 'W', "𝘞" },
            { 'E', "𝘌" },
            { 'R', "𝘙" },
            { 'T', "𝘛" },
            { 'Y', "𝘠" },
            { 'U', "𝘜" },
            { 'I', "𝘐" },
            { 'O', "𝘖" },
            { 'P', "𝘗" },
            { 'A', "𝘈" },
            { 'S', "𝘚" },
            { 'D', "𝘋" },
            { 'F', "𝘍" },
            { 'G', "𝘎" },
            { 'H', "𝘏" },
            { 'J', "𝘑" },
            { 'K', "𝘒" },
            { 'L', "𝘓" },
            { 'Z', "𝘡" },
            { 'X', "𝘟" },
            { 'C', "𝘊" },
            { 'V', "𝘝" },
            { 'B', "𝘉" },
            { 'N', "𝘕" },
            { 'M', "𝘔" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝙏𝙝𝙚 𝙦𝙪𝙞𝙘𝙠 𝙗𝙧𝙤𝙬𝙣 𝙛𝙤𝙭 𝙟𝙪𝙢𝙥𝙨 𝙤𝙫𝙚𝙧 𝙩𝙝𝙚 𝙡𝙖𝙯𝙮 𝙙𝙤𝙜.
        /// </summary>
        public static readonly Face CharSansBoldItalic  = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟭" },
            { '2', "𝟮" },
            { '3', "𝟯" },
            { '4', "𝟰" },
            { '5', "𝟱" },
            { '6', "𝟲" },
            { '7', "𝟳" },
            { '8', "𝟴" },
            { '9', "𝟵" },
            { '0', "𝟬" },
            { 'q', "𝙦" },
            { 'w', "𝙬" },
            { 'e', "𝙚" },
            { 'r', "𝙧" },
            { 't', "𝙩" },
            { 'y', "𝙮" },
            { 'u', "𝙪" },
            { 'i', "𝙞" },
            { 'o', "𝙤" },
            { 'p', "𝙥" },
            { 'a', "𝙖" },
            { 's', "𝙨" },
            { 'd', "𝙙" },
            { 'f', "𝙛" },
            { 'g', "𝙜" },
            { 'h', "𝙝" },
            { 'j', "𝙟" },
            { 'k', "𝙠" },
            { 'l', "𝙡" },
            { 'z', "𝙯" },
            { 'x', "𝙭" },
            { 'c', "𝙘" },
            { 'v', "𝙫" },
            { 'b', "𝙗" },
            { 'n', "𝙣" },
            { 'm', "𝙢" },
            { 'Q', "𝙌" },
            { 'W', "𝙒" },
            { 'E', "𝙀" },
            { 'R', "𝙍" },
            { 'T', "𝙏" },
            { 'Y', "𝙔" },
            { 'U', "𝙐" },
            { 'I', "𝙄" },
            { 'O', "𝙊" },
            { 'P', "𝙋" },
            { 'A', "𝘼" },
            { 'S', "𝙎" },
            { 'D', "𝘿" },
            { 'F', "𝙁" },
            { 'G', "𝙂" },
            { 'H', "𝙃" },
            { 'J', "𝙅" },
            { 'K', "𝙆" },
            { 'L', "𝙇" },
            { 'Z', "𝙕" },
            { 'X', "𝙓" },
            { 'C', "𝘾" },
            { 'V', "𝙑" },
            { 'B', "𝘽" },
            { 'N', "𝙉" },
            { 'M', "𝙈" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝒯𝒽ℯ 𝓆𝓊𝒾𝒸𝓀 𝒷𝓇ℴ𝓌𝓃 𝒻ℴ𝓍 𝒿𝓊𝓂𝓅𝓈 ℴ𝓋ℯ𝓇 𝓉𝒽ℯ 𝓁𝒶𝓏𝓎 𝒹ℴℊ.
        /// </summary>
        public static readonly Face CharScript          = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟷" },
            { '2', "𝟸" },
            { '3', "𝟹" },
            { '4', "𝟺" },
            { '5', "𝟻" },
            { '6', "𝟼" },
            { '7', "𝟽" },
            { '8', "𝟾" },
            { '9', "𝟿" },
            { '0', "𝟶" },
            { 'q', "𝓆" },
            { 'w', "𝓌" },
            { 'e', "ℯ" },
            { 'r', "𝓇" },
            { 't', "𝓉" },
            { 'y', "𝓎" },
            { 'u', "𝓊" },
            { 'i', "𝒾" },
            { 'o', "ℴ" },
            { 'p', "𝓅" },
            { 'a', "𝒶" },
            { 's', "𝓈" },
            { 'd', "𝒹" },
            { 'f', "𝒻" },
            { 'g', "ℊ" },
            { 'h', "𝒽" },
            { 'j', "𝒿" },
            { 'k', "𝓀" },
            { 'l', "𝓁" },
            { 'z', "𝓏" },
            { 'x', "𝓍" },
            { 'c', "𝒸" },
            { 'v', "𝓋" },
            { 'b', "𝒷" },
            { 'n', "𝓃" },
            { 'm', "𝓂" },
            { 'Q', "𝒬" },
            { 'W', "𝒲" },
            { 'E', "ℰ" },
            { 'R', "ℛ" },
            { 'T', "𝒯" },
            { 'Y', "𝒴" },
            { 'U', "𝒰" },
            { 'I', "ℐ" },
            { 'O', "𝒪" },
            { 'P', "𝒫" },
            { 'A', "𝒜" },
            { 'S', "𝒮" },
            { 'D', "𝒟" },
            { 'F', "ℱ" },
            { 'G', "𝒢" },
            { 'H', "ℋ" },
            { 'J', "𝒥" },
            { 'K', "𝒦" },
            { 'L', "ℒ" },
            { 'Z', "𝒵" },
            { 'X', "𝒳" },
            { 'C', "𝒞" },
            { 'V', "𝒱" },
            { 'B', "ℬ" },
            { 'N', "𝒩" },
            { 'M', "ℳ" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝓣𝓱𝓮 𝓺𝓾𝓲𝓬𝓴 𝓫𝓻𝓸𝔀𝓷 𝓯𝓸𝔁 𝓳𝓾𝓶𝓹𝓼 𝓸𝓿𝓮𝓻 𝓽𝓱𝓮 𝓵𝓪𝔃𝔂 𝓭𝓸𝓰.
        /// </summary>
        public static readonly Face CharScriptBold      = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟏" },
            { '2', "𝟐" },
            { '3', "𝟑" },
            { '4', "𝟒" },
            { '5', "𝟓" },
            { '6', "𝟔" },
            { '7', "𝟕" },
            { '8', "𝟖" },
            { '9', "𝟗" },
            { '0', "𝟎" },
            { 'q', "𝓺" },
            { 'w', "𝔀" },
            { 'e', "𝓮" },
            { 'r', "𝓻" },
            { 't', "𝓽" },
            { 'y', "𝔂" },
            { 'u', "𝓾" },
            { 'i', "𝓲" },
            { 'o', "𝓸" },
            { 'p', "𝓹" },
            { 'a', "𝓪" },
            { 's', "𝓼" },
            { 'd', "𝓭" },
            { 'f', "𝓯" },
            { 'g', "𝓰" },
            { 'h', "𝓱" },
            { 'j', "𝓳" },
            { 'k', "𝓴" },
            { 'l', "𝓵" },
            { 'z', "𝔃" },
            { 'x', "𝔁" },
            { 'c', "𝓬" },
            { 'v', "𝓿" },
            { 'b', "𝓫" },
            { 'n', "𝓷" },
            { 'm', "𝓶" },
            { 'Q', "𝓠" },
            { 'W', "𝓦" },
            { 'E', "𝓔" },
            { 'R', "𝓡" },
            { 'T', "𝓣" },
            { 'Y', "𝓨" },
            { 'U', "𝓤" },
            { 'I', "𝓘" },
            { 'O', "𝓞" },
            { 'P', "𝓟" },
            { 'A', "𝓐" },
            { 'S', "𝓢" },
            { 'D', "𝓓" },
            { 'F', "𝓕" },
            { 'G', "𝓖" },
            { 'H', "𝓗" },
            { 'J', "𝓙" },
            { 'K', "𝓚" },
            { 'L', "𝓛" },
            { 'Z', "𝓩" },
            { 'X', "𝓧" },
            { 'C', "𝓒" },
            { 'V', "𝓥" },
            { 'B', "𝓑" },
            { 'N', "𝓝" },
            { 'M', "𝓜" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝔗𝔥𝔢 𝔮𝔲𝔦𝔠𝔨 𝔟𝔯𝔬𝔴𝔫 𝔣𝔬𝔵 𝔧𝔲𝔪𝔭𝔰 𝔬𝔳𝔢𝔯 𝔱𝔥𝔢 𝔩𝔞𝔷𝔶 𝔡𝔬𝔤.
        /// </summary>
        public static readonly Face CharFraktur         = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟷" },
            { '2', "𝟸" },
            { '3', "𝟹" },
            { '4', "𝟺" },
            { '5', "𝟻" },
            { '6', "𝟼" },
            { '7', "𝟽" },
            { '8', "𝟾" },
            { '9', "𝟿" },
            { '0', "𝟶" },
            { 'q', "𝔮" },
            { 'w', "𝔴" },
            { 'e', "𝔢" },
            { 'r', "𝔯" },
            { 't', "𝔱" },
            { 'y', "𝔶" },
            { 'u', "𝔲" },
            { 'i', "𝔦" },
            { 'o', "𝔬" },
            { 'p', "𝔭" },
            { 'a', "𝔞" },
            { 's', "𝔰" },
            { 'd', "𝔡" },
            { 'f', "𝔣" },
            { 'g', "𝔤" },
            { 'h', "𝔥" },
            { 'j', "𝔧" },
            { 'k', "𝔨" },
            { 'l', "𝔩" },
            { 'z', "𝔷" },
            { 'x', "𝔵" },
            { 'c', "𝔠" },
            { 'v', "𝔳" },
            { 'b', "𝔟" },
            { 'n', "𝔫" },
            { 'm', "𝔪" },
            { 'Q', "𝔔" },
            { 'W', "𝔚" },
            { 'E', "𝔈" },
            { 'R', "ℜ" },
            { 'T', "𝔗" },
            { 'Y', "𝔜" },
            { 'U', "𝔘" },
            { 'I', "ℑ" },
            { 'O', "𝔒" },
            { 'P', "𝔓" },
            { 'A', "𝔄" },
            { 'S', "𝔖" },
            { 'D', "𝔇" },
            { 'F', "𝔉" },
            { 'G', "𝔊" },
            { 'H', "ℌ" },
            { 'J', "𝔍" },
            { 'K', "𝔎" },
            { 'L', "𝔏" },
            { 'Z', "ℨ" },
            { 'X', "𝔛" },
            { 'C', "ℭ" },
            { 'V', "𝔙" },
            { 'B', "𝔅" },
            { 'N', "𝔑" },
            { 'M', "𝔐" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝕿𝖍𝖊 𝖖𝖚𝖎𝖈𝖐 𝖇𝖗𝖔𝖜𝖓 𝖋𝖔𝖝 𝖏𝖚𝖒𝖕𝖘 𝖔𝖛𝖊𝖗 𝖙𝖍𝖊 𝖑𝖆𝖟𝖞 𝖉𝖔𝖌.
        /// </summary>
        public static readonly Face CharFrakturBold     = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟏" },
            { '2', "𝟐" },
            { '3', "𝟑" },
            { '4', "𝟒" },
            { '5', "𝟓" },
            { '6', "𝟔" },
            { '7', "𝟕" },
            { '8', "𝟖" },
            { '9', "𝟗" },
            { '0', "𝟎" },
            { 'q', "𝖖" },
            { 'w', "𝖜" },
            { 'e', "𝖊" },
            { 'r', "𝖗" },
            { 't', "𝖙" },
            { 'y', "𝖞" },
            { 'u', "𝖚" },
            { 'i', "𝖎" },
            { 'o', "𝖔" },
            { 'p', "𝖕" },
            { 'a', "𝖆" },
            { 's', "𝖘" },
            { 'd', "𝖉" },
            { 'f', "𝖋" },
            { 'g', "𝖌" },
            { 'h', "𝖍" },
            { 'j', "𝖏" },
            { 'k', "𝖐" },
            { 'l', "𝖑" },
            { 'z', "𝖟" },
            { 'x', "𝖝" },
            { 'c', "𝖈" },
            { 'v', "𝖛" },
            { 'b', "𝖇" },
            { 'n', "𝖓" },
            { 'm', "𝖒" },
            { 'Q', "𝕼" },
            { 'W', "𝖂" },
            { 'E', "𝕰" },
            { 'R', "𝕽" },
            { 'T', "𝕿" },
            { 'Y', "𝖄" },
            { 'U', "𝖀" },
            { 'I', "𝕴" },
            { 'O', "𝕺" },
            { 'P', "𝕻" },
            { 'A', "𝕬" },
            { 'S', "𝕾" },
            { 'D', "𝕯" },
            { 'F', "𝕱" },
            { 'G', "𝕲" },
            { 'H', "𝕳" },
            { 'J', "𝕵" },
            { 'K', "𝕶" },
            { 'L', "𝕷" },
            { 'Z', "𝖅" },
            { 'X', "𝖃" },
            { 'C', "𝕮" },
            { 'V', "𝖁" },
            { 'B', "𝕭" },
            { 'N', "𝕹" },
            { 'M', "𝕸" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// 𝚃𝚑𝚎　𝚚𝚞𝚒𝚌𝚔　𝚋𝚛𝚘𝚠𝚗　𝚏𝚘𝚡　𝚓𝚞𝚖𝚙𝚜　𝚘𝚟𝚎𝚛　𝚝𝚑𝚎　𝚕𝚊𝚣𝚢　𝚍𝚘𝚐．
        /// </summary>
        public static readonly Face CharMonospace       = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟷" },
            { '2', "𝟸" },
            { '3', "𝟹" },
            { '4', "𝟺" },
            { '5', "𝟻" },
            { '6', "𝟼" },
            { '7', "𝟽" },
            { '8', "𝟾" },
            { '9', "𝟿" },
            { '0', "𝟶" },
            { 'q', "𝚚" },
            { 'w', "𝚠" },
            { 'e', "𝚎" },
            { 'r', "𝚛" },
            { 't', "𝚝" },
            { 'y', "𝚢" },
            { 'u', "𝚞" },
            { 'i', "𝚒" },
            { 'o', "𝚘" },
            { 'p', "𝚙" },
            { 'a', "𝚊" },
            { 's', "𝚜" },
            { 'd', "𝚍" },
            { 'f', "𝚏" },
            { 'g', "𝚐" },
            { 'h', "𝚑" },
            { 'j', "𝚓" },
            { 'k', "𝚔" },
            { 'l', "𝚕" },
            { 'z', "𝚣" },
            { 'x', "𝚡" },
            { 'c', "𝚌" },
            { 'v', "𝚟" },
            { 'b', "𝚋" },
            { 'n', "𝚗" },
            { 'm', "𝚖" },
            { 'Q', "𝚀" },
            { 'W', "𝚆" },
            { 'E', "𝙴" },
            { 'R', "𝚁" },
            { 'T', "𝚃" },
            { 'Y', "𝚈" },
            { 'U', "𝚄" },
            { 'I', "𝙸" },
            { 'O', "𝙾" },
            { 'P', "𝙿" },
            { 'A', "𝙰" },
            { 'S', "𝚂" },
            { 'D', "𝙳" },
            { 'F', "𝙵" },
            { 'G', "𝙶" },
            { 'H', "𝙷" },
            { 'J', "𝙹" },
            { 'K', "𝙺" },
            { 'L', "𝙻" },
            { 'Z', "𝚉" },
            { 'X', "𝚇" },
            { 'C', "𝙲" },
            { 'V', "𝚅" },
            { 'B', "𝙱" },
            { 'N', "𝙽" },
            { 'M', "𝙼" }
        }, true , LetterCase.Mixed    );
        /// <summary>
        /// Ｔｈｅ　ｑｕｉｃｋ　ｂｒｏｗｎ　ｆｏｘ　ｊｕｍｐｓ　ｏｖｅｒ　ｔｈｅ　ｌａｚｙ　ｄｏｇ．
        /// </summary>
        public static readonly Face CharFullwidth = new Face(new Dictionary<char, string>()
        {
        }, true, LetterCase.Mixed);
        /// <summary>
        /// 𝕋𝕙𝕖　𝕢𝕦𝕚𝕔𝕜　𝕓𝕣𝕠𝕨𝕟　𝕗𝕠𝕩　𝕛𝕦𝕞𝕡𝕤　𝕠𝕧𝕖𝕣　𝕥𝕙𝕖　𝕝𝕒𝕫𝕪　𝕕𝕠𝕘．
        /// </summary>
        public static readonly Face CharDoubleStruck    = new Face(new Dictionary<char, string>()
        {
            { '1', "𝟙" },
            { '2', "𝟚" },
            { '3', "𝟛" },
            { '4', "𝟜" },
            { '5', "𝟝" },
            { '6', "𝟞" },
            { '7', "𝟟" },
            { '8', "𝟠" },
            { '9', "𝟡" },
            { '0', "𝟘" },
            { 'q', "𝕢" },
            { 'w', "𝕨" },
            { 'e', "𝕖" },
            { 'r', "𝕣" },
            { 't', "𝕥" },
            { 'y', "𝕪" },
            { 'u', "𝕦" },
            { 'i', "𝕚" },
            { 'o', "𝕠" },
            { 'p', "𝕡" },
            { 'a', "𝕒" },
            { 's', "𝕤" },
            { 'd', "𝕕" },
            { 'f', "𝕗" },
            { 'g', "𝕘" },
            { 'h', "𝕙" },
            { 'j', "𝕛" },
            { 'k', "𝕜" },
            { 'l', "𝕝" },
            { 'z', "𝕫" },
            { 'x', "𝕩" },
            { 'c', "𝕔" },
            { 'v', "𝕧" },
            { 'b', "𝕓" },
            { 'n', "𝕟" },
            { 'm', "𝕞" },
            { 'Q', "ℚ" },
            { 'W', "𝕎" },
            { 'E', "𝔼" },
            { 'R', "ℝ" },
            { 'T', "𝕋" },
            { 'Y', "𝕐" },
            { 'U', "𝕌" },
            { 'I', "𝕀" },
            { 'O', "𝕆" },
            { 'P', "ℙ" },
            { 'A', "𝔸" },
            { 'S', "𝕊" },
            { 'D', "𝔻" },
            { 'F', "𝔽" },
            { 'G', "𝔾" },
            { 'H', "ℍ" },
            { 'J', "𝕁" },
            { 'K', "𝕂" },
            { 'L', "𝕃" },
            { 'Z', "ℤ" },
            { 'X', "𝕏" },
            { 'C', "ℂ" },
            { 'V', "𝕍" },
            { 'B', "𝔹" },
            { 'N', "ℕ" },
            { 'M', "𝕄" }
        }, true , LetterCase.Mixed    );
        /// <summary>
        /// .ƃop ʎzɐן ǝɥʇ ɹǝʌo sdɯnɾ xoɟ uʍoɹq ʞɔınb ǝɥʇ
        /// </summary>
        public static readonly Face CharInverted        = new Face(new Dictionary<char, string>()
        {
            { '!', "¡" },
            { '&', "⅋" },
            { 'q', "b" },
            { 'w', "ʍ" },
            { 'e', "ǝ" },
            { 'r', "ɹ" },
            { 't', "ʇ" },
            { 'y', "ʎ" },
            { 'u', "n" },
            { 'i', "ı" },
            { 'p', "d" },
            { 'a', "ɐ" },
            { 'd', "p" },
            { 'f', "ɟ" },
            { 'g', "ƃ" },
            { 'h', "ɥ" },
            { 'j', "ɾ" },
            { 'k', "ʞ" },
            { 'l', "ן" },
            { 'c', "ɔ" },
            { 'v', "ʌ" },
            { 'b', "q" },
            { 'n', "u" },
            { 'm', "ɯ" },
            { '\'', "," },
            { ',', "‘" },
            { '?', "¿" }
        }, false, LetterCase.Lowercase);
        /// <summary>
        /// Ⓣⓗⓔ　ⓠⓤⓘⓒⓚ　ⓑⓡⓞⓦⓝ　ⓕⓞⓧ　ⓙⓤⓜⓟⓢ　ⓞⓥⓔⓡ　ⓣⓗⓔ　ⓛⓐⓩⓨ　ⓓⓞⓖ⨀
        /// </summary>
        public static readonly Face CharCircled         = new Face(new Dictionary<char, string>() {
            { '1', "①" },
            { '2', "②" },
            { '3', "③" },
            { '4', "④" },
            { '5', "⑤" },
            { '6', "⑥" },
            { '7', "⑦" },
            { '8', "⑧" },
            { '9', "⑨" },
            { '0', "⓪" },
            { '-', "⊖" },
            { '=', "⊜" },
            { '*', "⊛" },
            { '+', "⊕" },
            { 'q', "ⓠ" },
            { 'w', "ⓦ" },
            { 'e', "ⓔ" },
            { 'r', "ⓡ" },
            { 't', "ⓣ" },
            { 'y', "ⓨ" },
            { 'u', "ⓤ" },
            { 'i', "ⓘ" },
            { 'o', "ⓞ" },
            { 'p', "ⓟ" },
            { 'a', "ⓐ" },
            { 's', "ⓢ" },
            { 'd', "ⓓ" },
            { 'f', "ⓕ" },
            { 'g', "ⓖ" },
            { 'h', "ⓗ" },
            { 'j', "ⓙ" },
            { 'k', "ⓚ" },
            { 'l', "ⓛ" },
            { 'z', "ⓩ" },
            { 'x', "ⓧ" },
            { 'c', "ⓒ" },
            { 'v', "ⓥ" },
            { 'b', "ⓑ" },
            { 'n', "ⓝ" },
            { 'm', "ⓜ" },
            { '\\', "⦸" },
            { '.', "⨀" },
            { '/', "⊘" },
            { 'Q', "Ⓠ" },
            { 'W', "Ⓦ" },
            { 'E', "Ⓔ" },
            { 'R', "Ⓡ" },
            { 'T', "Ⓣ" },
            { 'Y', "Ⓨ" },
            { 'U', "Ⓤ" },
            { 'I', "Ⓘ" },
            { 'O', "Ⓞ" },
            { 'P', "Ⓟ" },
            { 'A', "Ⓐ" },
            { 'S', "Ⓢ" },
            { 'D', "Ⓓ" },
            { 'F', "Ⓕ" },
            { 'G', "Ⓖ" },
            { 'H', "Ⓗ" },
            { 'J', "Ⓙ" },
            { 'K', "Ⓚ" },
            { 'L', "Ⓛ" },
            { 'Z', "Ⓩ" },
            { 'X', "Ⓧ" },
            { 'C', "Ⓒ" },
            { 'V', "Ⓥ" },
            { 'B', "Ⓑ" },
            { 'N', "Ⓝ" },
            { 'M', "Ⓜ" },
            { '|', "⦶" },
            { '<', "⧀" },
            { '>', "⧁" }
        }, true , LetterCase.Mixed    );
        /// <summary>
        /// 🅣🅗🅔 🅠🅤🅘🅒🅚 🅑🅡🅞🅦🅝 🅕🅞🅧 🅙🅤🅜🅟🅢 🅞🅥🅔🅡 🅣🅗🅔 🅛🅐🅩🅨 🅓🅞🅖⨀
        /// </summary>
        public static readonly Face CharCircledInvert   = new Face(new Dictionary<char, string>() {
            { '1', "①" },
            { '2', "②" },
            { '3', "③" },
            { '4', "④" },
            { '5', "⑤" },
            { '6', "⑥" },
            { '7', "⑦" },
            { '8', "⑧" },
            { '9', "⑨" },
            { '0', "⓿" },
            { '-', "⊖" },
            { '=', "⊜" },
            { '*', "⊛" },
            { '+', "⊕" },
            { '\\', "⦸" },
            { '.', "⨀" },
            { '/', "⊘" },
            { 'Q', "🅠" },
            { 'W', "🅦" },
            { 'E', "🅔" },
            { 'R', "🅡" },
            { 'T', "🅣" },
            { 'Y', "🅨" },
            { 'U', "🅤" },
            { 'I', "🅘" },
            { 'O', "🅞" },
            { 'P', "🅟" },
            { 'A', "🅐" },
            { 'S', "🅢" },
            { 'D', "🅓" },
            { 'F', "🅕" },
            { 'G', "🅖" },
            { 'H', "🅗" },
            { 'J', "🅙" },
            { 'K', "🅚" },
            { 'L', "🅛" },
            { 'Z', "🅩" },
            { 'X', "🅧" },
            { 'C', "🅒" },
            { 'V', "🅥" },
            { 'B', "🅑" },
            { 'N', "🅝" },
            { 'M', "🅜" },
            { '|', "⦶" },
            { '<', "⧀" },
            { '>', "⧁" }
        }, false, LetterCase.Uppercase);
        /// <summary>
        /// 🅃🄷🄴　🅀🅄🄸🄲🄺　🄱🅁🄾🅆🄽　🄵🄾🅇　🄹🅄🄼🄿🅂　🄾🅅🄴🅁　🅃🄷🄴　🄻🄰🅉🅈　🄳🄾🄶⊡
        /// </summary>
        public static readonly Face CharSquared         = new Face(new Dictionary<char, string>()
        {
            { '1', "①" },
            { '2', "②" },
            { '3', "③" },
            { '4', "④" },
            { '5', "⑤" },
            { '6', "⑥" },
            { '7', "⑦" },
            { '8', "⑧" },
            { '9', "⑨" },
            { '0', "🄾" },
            { '-', "⊟" },
            { '=', "⊜" },
            { '*', "⧆" },
            { '+', "⊞" },
            { '\\', "⧅" },
            { '.', "⊡" },
            { '/', "⧄" },
            { 'Q', "🅀" },
            { 'W', "🅆" },
            { 'E', "🄴" },
            { 'R', "🅁" },
            { 'T', "🅃" },
            { 'Y', "🅈" },
            { 'U', "🅄" },
            { 'I', "🄸" },
            { 'O', "🄾" },
            { 'P', "🄿" },
            { 'A', "🄰" },
            { 'S', "🅂" },
            { 'D', "🄳" },
            { 'F', "🄵" },
            { 'G', "🄶" },
            { 'H', "🄷" },
            { 'J', "🄹" },
            { 'K', "🄺" },
            { 'L', "🄻" },
            { 'Z', "🅉" },
            { 'X', "🅇" },
            { 'C', "🄲" },
            { 'V', "🅅" },
            { 'B', "🄱" },
            { 'N', "🄽" },
            { 'M', "🄼" },
            { '|', "⦶" },
            { '<', "⧀" },
            { '>', "⧁" }
        }, true , LetterCase.Uppercase);
        /// <summary>
        /// 🆃🅷🅴 🆀🆄🅸🅲🅺 🅱🆁🅾🆆🅽 🅵🅾🆇 🅹🆄🅼🅿🆂 🅾🆅🅴🆁 🆃🅷🅴 🅻🅰🆉🆈 🅳🅾🅶⊡
        /// </summary>
        public static readonly Face CharSquaredInvert   = new Face(new Dictionary<char, string>()
        {
            { '1', "①" },
            { '2', "②" },
            { '3', "③" },
            { '4', "④" },
            { '5', "⑤" },
            { '6', "⑥" },
            { '7', "⑦" },
            { '8', "⑧" },
            { '9', "⑨" },
            { '0', "🅾" },
            { '-', "⊟" },
            { '=', "⊜" },
            { '*', "⧆" },
            { '+', "⊞" },
            { '\\', "⧅" },
            { '.', "⊡" },
            { '/', "⧄" },
            { 'Q', "🆀" },
            { 'W', "🆆" },
            { 'E', "🅴" },
            { 'R', "🆁" },
            { 'T', "🆃" },
            { 'Y', "🆈" },
            { 'U', "🆄" },
            { 'I', "🅸" },
            { 'O', "🅾" },
            { 'P', "🅿" },
            { 'A', "🅰" },
            { 'S', "🆂" },
            { 'D', "🅳" },
            { 'F', "🅵" },
            { 'G', "🅶" },
            { 'H', "🅷" },
            { 'J', "🅹" },
            { 'K', "🅺" },
            { 'L', "🅻" },
            { 'Z', "🆉" },
            { 'X', "🆇" },
            { 'C', "🅲" },
            { 'V', "🆅" },
            { 'B', "🅱" },
            { 'N', "🅽" },
            { 'M', "🅼" },
            { '|', "⦶" },
            { '<', "⧀" },
            { '>', "⧁" }
        }, false, LetterCase.Uppercase);
        /// <summary>
        /// ᴛʜᴇ Qᴜɪᴄᴋ ʙʀᴏᴡɴ ꜰᴏx ᴊᴜᴍᴩꜱ ᴏᴠᴇʀ ᴛʜᴇ ʟᴀᴢY ᴅᴏɢ.
        /// </summary>
        public static readonly Face CharSmallCaps       = new Face(new Dictionary<char, string>()
        {
            { '1', "¹" },
            { '2', "²" },
            { '3', "³" },
            { '4', "⁴" },
            { '5', "⁵" },
            { '6', "⁶" },
            { '7', "⁷" },
            { '8', "⁸" },
            { '9', "⁹" },
            { '0', "⁰" },
            { 'W', "ᴡ" },
            { 'E', "ᴇ" },
            { 'R', "ʀ" },
            { 'T', "ᴛ" },
            { 'U', "ᴜ" },
            { 'I', "ɪ" },
            { 'O', "ᴏ" },
            { 'P', "ᴩ" },
            { 'A', "ᴀ" },
            { 'S', "ꜱ" },
            { 'D', "ᴅ" },
            { 'F', "ꜰ" },
            { 'G', "ɢ" },
            { 'H', "ʜ" },
            { 'J', "ᴊ" },
            { 'K', "ᴋ" },
            { 'L', "ʟ" },
            { 'Z', "ᴢ" },
            { 'X', "x" },
            { 'C', "ᴄ" },
            { 'V', "ᴠ" },
            { 'B', "ʙ" },
            { 'N', "ɴ" },
            { 'M', "ᴍ" }
        }, false, LetterCase.Uppercase);
        /// <summary>
        /// ᵀʰᵉ qᵘⁱᶜᵏ ᵇʳᵒʷⁿ ᶠᵒˣ ʲᵘᵐᵖˢ ᵒᵛᵉʳ ᵗʰᵉ ˡᵃᶻʸ ᵈᵒᵍ.
        /// </summary>
        public static readonly Face CharSubscript       = new Face(new Dictionary<char, string>()
        {
            { '1', "¹" },
            { '2', "²" },
            { '3', "³" },
            { '4', "⁴" },
            { '5', "⁵" },
            { '6', "⁶" },
            { '7', "⁷" },
            { '8', "⁸" },
            { '9', "⁹" },
            { '0', "⁰" },
            { 'w', "ʷ" },
            { 'e', "ᵉ" },
            { 'r', "ʳ" },
            { 't', "ᵗ" },
            { 'y', "ʸ" },
            { 'u', "ᵘ" },
            { 'i', "ⁱ" },
            { 'o', "ᵒ" },
            { 'p', "ᵖ" },
            { 'a', "ᵃ" },
            { 's', "ˢ" },
            { 'd', "ᵈ" },
            { 'f', "ᶠ" },
            { 'g', "ᵍ" },
            { 'h', "ʰ" },
            { 'j', "ʲ" },
            { 'k', "ᵏ" },
            { 'l', "ˡ" },
            { 'z', "ᶻ" },
            { 'x', "ˣ" },
            { 'c', "ᶜ" },
            { 'v', "ᵛ" },
            { 'b', "ᵇ" },
            { 'n', "ⁿ" },
            { 'm', "ᵐ" },
            { 'W', "ᵂ" },
            { 'E', "ᴱ" },
            { 'R', "ᴿ" },
            { 'T', "ᵀ" },
            { 'Y', "ʸ" },
            { 'U', "ᵁ" },
            { 'I', "ᴵ" },
            { 'O', "ᴼ" },
            { 'P', "ᴾ" },
            { 'A', "ᴬ" },
            { 'S', "ˢ" },
            { 'D', "ᴰ" },
            { 'F', "ᶠ" },
            { 'G', "ᴳ" },
            { 'H', "ᴴ" },
            { 'J', "ᴶ" },
            { 'K', "ᴷ" },
            { 'L', "ᴸ" },
            { 'Z', "ᶻ" },
            { 'X', "ˣ" },
            { 'C', "ᶜ" },
            { 'V', "ⱽ" },
            { 'B', "ᴮ" },
            { 'N', "ᴺ" },
            { 'M', "ᴹ" }
        }, false, LetterCase.Mixed    );
        /// <summary>
        /// ⒯⒣⒠ ⒬⒰⒤⒞⒦ ⒝⒭⒪⒲⒩ ⒡⒪⒳ ⒥⒰⒨⒫⒮ ⒪⒱⒠⒭ ⒯⒣⒠ ⒧⒜⒵⒴ ⒟⒪⒢.
        /// </summary>
        public static readonly Face CharParenthesized   = new Face(new Dictionary<char, string>()
        {
            { '1', "⑴" },
            { '2', "⑵" },
            { '3', "⑶" },
            { '4', "⑷" },
            { '5', "⑸" },
            { '6', "⑹" },
            { '7', "⑺" },
            { '8', "⑻" },
            { '9', "⑼" },
            { '0', "⒪" },
            { 'q', "⒬" },
            { 'w', "⒲" },
            { 'e', "⒠" },
            { 'r', "⒭" },
            { 't', "⒯" },
            { 'y', "⒴" },
            { 'u', "⒰" },
            { 'i', "⒤" },
            { 'o', "⒪" },
            { 'p', "⒫" },
            { 'a', "⒜" },
            { 's', "⒮" },
            { 'd', "⒟" },
            { 'f', "⒡" },
            { 'g', "⒢" },
            { 'h', "⒣" },
            { 'j', "⒥" },
            { 'k', "⒦" },
            { 'l', "⒧" },
            { 'z', "⒵" },
            { 'x', "⒳" },
            { 'c', "⒞" },
            { 'v', "⒱" },
            { 'b', "⒝" },
            { 'n', "⒩" },
            { 'm', "⒨" }
        }, false, LetterCase.Lowercase);
        /// <summary>
        /// ㄒ卄乇　ＱЦ丨匚ズ　乃尺σЩ刀　ቻσ乂　ﾌЦጠρ丂　σＶ乇尺　ㄒ卄乇　ረ卂乙Ч　ＤσБ．
        /// </summary>
        public static readonly Face CharExtraThicc      = new Face(new Dictionary<char, string>() {
            //{ 'Q', "Ｑ" },
            { 'W', "Щ" },
            { 'E', "乇" },
            { 'R', "尺" },
            { 'T', "ㄒ" },
            { 'Y', "Ч" },
            { 'U', "Ц" },
            { 'I', "丨" },
            { 'O', "σ" },
            { 'P', "ρ" },
            { 'A', "卂" },
            { 'S', "丂" },
            //{ 'D', "Ｄ" },
            { 'F', "ቻ" },
            { 'G', "Б" },
            { 'H', "卄" },
            { 'J', "ﾌ" },
            { 'K', "ズ" },
            { 'L', "ረ" },
            { 'Z', "乙" },
            { 'X', "乂" },
            { 'C', "匚" },
            //{ 'V', "Ｖ" },
            { 'B', "乃" },
            { 'N', "刀" },
            { 'M', "ጠ" }
        }, true , LetterCase.Uppercase);
        /// <summary>
        /// 7h3 qu!(k 8r0wn f0x jump5 0v3r 7h3 142y d09.
        /// </summary>
        public static readonly Face CharNumberspeak     = new Face(new Dictionary<char, string>()
        {
            { 'e', "3" },
            { 't', "7" },
            { 'i', "!" },
            { 'o', "0" },
            { 'a', "4" },
            { 's', "5" },
            { 'g', "9" },
            { 'l', "1" },
            { 'z', "2" },
            { 'c', "(" },
            { 'b', "8" }
        }, false, LetterCase.Lowercase);
        /// <summary>
        /// THΣ QUIↃK BROWN FOX JUMPS OVΣR THΣ LΛZY DOG.
        /// </summary>
        public static readonly Face CharBlankBanshee    = new Face(new Dictionary<char, string>()
        {
            { 'E', "Σ" },
            { 'C', "Ↄ" },
            { 'A', "Λ" },
            { '<', "◁" },
            { '>', "▷" }
        }, false, LetterCase.Uppercase);
    }

    /// <summary>
    /// A typeface, which converts one type of character to another.
    /// </summary>
    public class Face
    {
        private Dictionary<Char, String> Dictionary;

        /// <summary>
        /// Checks if the typeface converts extra characters to full width to complete it's aesthetic.
        /// </summary>
        public bool IsFullWidth { get; }
        
        /// <summary>
        /// Checks if the typeface supports lowercase/uppercase characters. If it supports only one case, all characters will be converted to that case.
        /// </summary>
        public LetterCase Case { get; }

        private const uint LOCALE_SYSTEM_DEFAULT = 0x0800;
        private const uint LCMAP_HALFWIDTH = 0x00400000;
        private const uint LCMAP_FULLWIDTH = 0x00800000;
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]
        private static extern int LCMapString(uint Locale, uint dwMapFlags, string lpSrcStr, int cchSrc, StringBuilder lpDestStr, int cchDest);
        private static string ToFullWidth(string halfWidth)
        {
            StringBuilder sb = new StringBuilder(256);
            LCMapString(LOCALE_SYSTEM_DEFAULT, LCMAP_FULLWIDTH, halfWidth, -1, sb, sb.Capacity);
            return sb.ToString();
        }

        /// <summary>
        /// Creates a new typeface, which you can than convert text into
        /// </summary>
        /// <param name="Dictionary">Write the real character, then the character you want to convert. Example: { 'E', "𝓔" } </param>
        /// <param name="IsFullWidth">If true, characters that dont appear in the typeface will be converted to full width characters</param>
        /// <param name="Case">Change if your typeface contains uppercase or lowercase characters exclusivly.</param>
        public Face(Dictionary<Char, String> Dictionary, bool IsFullWidth = false, LetterCase Case = LetterCase.Mixed)
        {
            this.Dictionary = Dictionary;
            this.IsFullWidth = IsFullWidth;
            this.Case = Case;
        }
        
        /// <summary>
        /// Checks if a character exists in a typeface.
        /// </summary>
        /// <param name="Char">The character you want to check.</param>
        /// <returns></returns>
        public bool ContainsChar(char Char)
        {
            if (Dictionary.ContainsKey(Char))
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Converts a string or a char to it's typeface equivalent.
        /// </summary>
        /// <param name="Char">The character you want to convert.</param>
        /// <returns></returns>
        public string Convert(char Char)
        {
            switch (Case)
            {
                case LetterCase.Uppercase:
                    Char = Char.ToString().ToUpper()[0];
                    break;
                case LetterCase.Lowercase:
                    Char = Char.ToString().ToLower()[0];
                    break;
            }

            if (ContainsChar(Char))
            {
                return Dictionary[Char];
            }
            else
            {
                if (IsFullWidth)
                {
                    return ToFullWidth(Char.ToString());
                }
                else
                {
                    return Char.ToString();
                }
            }
        }

        /// <summary>
        /// Converts a string or a char to it's typeface equivalent.
        /// </summary>
        /// <param name="Str">The string you want to convert.</param>
        /// <returns></returns>
        public string Convert(string Str)
        {
            StringBuilder result = new StringBuilder();
            foreach (char c in Str)
            {
                result.Append(Convert(c));
            }
            return result.ToString();
        }
    }

    /// <summary>
    /// Specifies whether the typeface contains uppercase or lowercase letters exclusivly. If not set to mixed, all characters will be converted to the selected case.
    /// </summary>
    public enum LetterCase
    {
        /// <summary>
        /// All characters in the typeface are uppercase.
        /// </summary>
        Uppercase,

        /// <summary>
        /// The typeface contains both uppercase and lowercase letters.
        /// </summary>
        Mixed,

        /// <summary>
        /// All characters in the typeface are lowercase.
        /// </summary>
        Lowercase,
    };
}