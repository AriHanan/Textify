using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Textify
{
    public partial class Textify : Form
    {
        private const uint LOCALE_SYSTEM_DEFAULT = 0x0800;
        private const uint LCMAP_HALFWIDTH = 0x00400000;
        private const uint LCMAP_FULLWIDTH = 0x00800000;

        //`1234567890-=~!@#$%^&*()_+qwertyuiopasdfghjklzxcvbnm[];'\,./QWERTYUIOPASDFGHJKLZXCVBNM{}:"|<>?
        private readonly Dictionary<Char, String> CharSerifBold = new Dictionary<char, string>() {
            { '1', "𝟏" },
            { '2', "𝟐" },
            { '3', "𝟑" },
            { '4', "𝟒" },
            { '5', "𝟓" },
            { '6', "𝟔" },
            { '7', "𝟕" },
            { '8', "𝟖" },
            { '9', "𝟗" },
            { '0', "𝟎" },
            { 'q', "𝐪" },
            { 'w', "𝐰" },
            { 'e', "𝐞" },
            { 'r', "𝐫" },
            { 't', "𝐭" },
            { 'y', "𝐲" },
            { 'u', "𝐮" },
            { 'i', "𝐢" },
            { 'o', "𝐨" },
            { 'p', "𝐩" },
            { 'a', "𝐚" },
            { 's', "𝐬" },
            { 'd', "𝐝" },
            { 'f', "𝐟" },
            { 'g', "𝐠" },
            { 'h', "𝐡" },
            { 'j', "𝐣" },
            { 'k', "𝐤" },
            { 'l', "𝐥" },
            { 'z', "𝐳" },
            { 'x', "𝐱" },
            { 'c', "𝐜" },
            { 'v', "𝐯" },
            { 'b', "𝐛" },
            { 'n', "𝐧" },
            { 'm', "𝐦" },
            { 'Q', "𝐐" },
            { 'W', "𝐖" },
            { 'E', "𝐄" },
            { 'R', "𝐑" },
            { 'T', "𝐓" },
            { 'Y', "𝐘" },
            { 'U', "𝐔" },
            { 'I', "𝐈" },
            { 'O', "𝐎" },
            { 'P', "𝐏" },
            { 'A', "𝐀" },
            { 'S', "𝐒" },
            { 'D', "𝐃" },
            { 'F', "𝐅" },
            { 'G', "𝐆" },
            { 'H', "𝐇" },
            { 'J', "𝐉" },
            { 'K', "𝐊" },
            { 'L', "𝐋" },
            { 'Z', "𝐙" },
            { 'X', "𝐗" },
            { 'C', "𝐂" },
            { 'V', "𝐕" },
            { 'B', "𝐁" },
            { 'N', "𝐍" },
            { 'M', "𝐌" }
        };
        private readonly Dictionary<Char, String> CharSerifItalic = new Dictionary<char, string>()
        {
            { '1', "𝟷" },
            { '2', "𝟸" },
            { '3', "𝟹" },
            { '4', "𝟺" },
            { '5', "𝟻" },
            { '6', "𝟼" },
            { '7', "𝟽" },
            { '8', "𝟾" },
            { '9', "𝟿" },
            { '0', "𝟶" },
            { 'q', "𝑞" },
            { 'w', "𝑤" },
            { 'e', "𝑒" },
            { 'r', "𝑟" },
            { 't', "𝑡" },
            { 'y', "𝑦" },
            { 'u', "𝑢" },
            { 'i', "𝑖" },
            { 'o', "𝑜" },
            { 'p', "𝑝" },
            { 'a', "𝑎" },
            { 's', "𝑠" },
            { 'd', "𝑑" },
            { 'f', "𝑓" },
            { 'g', "𝑔" },
            { 'h', "ℎ" },
            { 'j', "𝑗" },
            { 'k', "𝑘" },
            { 'l', "𝑙" },
            { 'z', "𝑧" },
            { 'x', "𝑥" },
            { 'c', "𝑐" },
            { 'v', "𝑣" },
            { 'b', "𝑏" },
            { 'n', "𝑛" },
            { 'm', "𝑚" },
            { 'Q', "𝑄" },
            { 'W', "𝑊" },
            { 'E', "𝐸" },
            { 'R', "𝑅" },
            { 'T', "𝑇" },
            { 'Y', "𝑌" },
            { 'U', "𝑈" },
            { 'I', "𝐼" },
            { 'O', "𝑂" },
            { 'P', "𝑃" },
            { 'A', "𝐴" },
            { 'S', "𝑆" },
            { 'D', "𝐷" },
            { 'F', "𝐹" },
            { 'G', "𝐺" },
            { 'H', "𝐻" },
            { 'J', "𝐽" },
            { 'K', "𝐾" },
            { 'L', "𝐿" },
            { 'Z', "𝑍" },
            { 'X', "𝑋" },
            { 'C', "𝐶" },
            { 'V', "𝑉" },
            { 'B', "𝐵" },
            { 'N', "𝑁" },
            { 'M', "𝑀" }
        };
        private readonly Dictionary<Char, String> CharSerifBoldItalic = new Dictionary<char, string>()
        {
            { '1', "𝟏" },
            { '2', "𝟐" },
            { '3', "𝟑" },
            { '4', "𝟒" },
            { '5', "𝟓" },
            { '6', "𝟔" },
            { '7', "𝟕" },
            { '8', "𝟖" },
            { '9', "𝟗" },
            { '0', "𝟎" },
            { 'q', "𝒒" },
            { 'w', "𝒘" },
            { 'e', "𝒆" },
            { 'r', "𝒓" },
            { 't', "𝒕" },
            { 'y', "𝒚" },
            { 'u', "𝒖" },
            { 'i', "𝒊" },
            { 'o', "𝒐" },
            { 'p', "𝒑" },
            { 'a', "𝒂" },
            { 's', "𝒔" },
            { 'd', "𝒅" },
            { 'f', "𝒇" },
            { 'g', "𝒈" },
            { 'h', "𝒉" },
            { 'j', "𝒋" },
            { 'k', "𝒌" },
            { 'l', "𝒍" },
            { 'z', "𝒛" },
            { 'x', "𝒙" },
            { 'c', "𝒄" },
            { 'v', "𝒗" },
            { 'b', "𝒃" },
            { 'n', "𝒏" },
            { 'm', "𝒎" },
            { 'Q', "𝑸" },
            { 'W', "𝑾" },
            { 'E', "𝑬" },
            { 'R', "𝑹" },
            { 'T', "𝑻" },
            { 'Y', "𝒀" },
            { 'U', "𝑼" },
            { 'I', "𝑰" },
            { 'O', "𝑶" },
            { 'P', "𝑷" },
            { 'A', "𝑨" },
            { 'S', "𝑺" },
            { 'D', "𝑫" },
            { 'F', "𝑭" },
            { 'G', "𝑮" },
            { 'H', "𝑯" },
            { 'J', "𝑱" },
            { 'K', "𝑲" },
            { 'L', "𝑳" },
            { 'Z', "𝒁" },
            { 'X', "𝑿" },
            { 'C', "𝑪" },
            { 'V', "𝑽" },
            { 'B', "𝑩" },
            { 'N', "𝑵" },
            { 'M', "𝑴" }
        };
        private readonly Dictionary<Char, String> CharSans = new Dictionary<char, string>()
        {
            { '1', "𝟣" },
            { '2', "𝟤" },
            { '3', "𝟥" },
            { '4', "𝟦" },
            { '5', "𝟧" },
            { '6', "𝟨" },
            { '7', "𝟩" },
            { '8', "𝟪" },
            { '9', "𝟫" },
            { '0', "𝟢" },
            { 'q', "𝗊" },
            { 'w', "𝗐" },
            { 'e', "𝖾" },
            { 'r', "𝗋" },
            { 't', "𝗍" },
            { 'y', "𝗒" },
            { 'u', "𝗎" },
            { 'i', "𝗂" },
            { 'o', "𝗈" },
            { 'p', "𝗉" },
            { 'a', "𝖺" },
            { 's', "𝗌" },
            { 'd', "𝖽" },
            { 'f', "𝖿" },
            { 'g', "𝗀" },
            { 'h', "𝗁" },
            { 'j', "𝗃" },
            { 'k', "𝗄" },
            { 'l', "𝗅" },
            { 'z', "𝗓" },
            { 'x', "𝗑" },
            { 'c', "𝖼" },
            { 'v', "𝗏" },
            { 'b', "𝖻" },
            { 'n', "𝗇" },
            { 'm', "𝗆" },
            { 'Q', "𝖰" },
            { 'W', "𝖶" },
            { 'E', "𝖤" },
            { 'R', "𝖱" },
            { 'T', "𝖳" },
            { 'Y', "𝖸" },
            { 'U', "𝖴" },
            { 'I', "𝖨" },
            { 'O', "𝖮" },
            { 'P', "𝖯" },
            { 'A', "𝖠" },
            { 'S', "𝖲" },
            { 'D', "𝖣" },
            { 'F', "𝖥" },
            { 'G', "𝖦" },
            { 'H', "𝖧" },
            { 'J', "𝖩" },
            { 'K', "𝖪" },
            { 'L', "𝖫" },
            { 'Z', "𝖹" },
            { 'X', "𝖷" },
            { 'C', "𝖢" },
            { 'V', "𝖵" },
            { 'B', "𝖡" },
            { 'N', "𝖭" },
            { 'M', "𝖬" }
        };
        private readonly Dictionary<Char, String> CharSansBold = new Dictionary<char, string>()
        {
            { '1', "𝟭" },
            { '2', "𝟮" },
            { '3', "𝟯" },
            { '4', "𝟰" },
            { '5', "𝟱" },
            { '6', "𝟲" },
            { '7', "𝟳" },
            { '8', "𝟴" },
            { '9', "𝟵" },
            { '0', "𝟬" },
            { 'q', "𝗾" },
            { 'w', "𝘄" },
            { 'e', "𝗲" },
            { 'r', "𝗿" },
            { 't', "𝘁" },
            { 'y', "𝘆" },
            { 'u', "𝘂" },
            { 'i', "𝗶" },
            { 'o', "𝗼" },
            { 'p', "𝗽" },
            { 'a', "𝗮" },
            { 's', "𝘀" },
            { 'd', "𝗱" },
            { 'f', "𝗳" },
            { 'g', "𝗴" },
            { 'h', "𝗵" },
            { 'j', "𝗷" },
            { 'k', "𝗸" },
            { 'l', "𝗹" },
            { 'z', "𝘇" },
            { 'x', "𝘅" },
            { 'c', "𝗰" },
            { 'v', "𝘃" },
            { 'b', "𝗯" },
            { 'n', "𝗻" },
            { 'm', "𝗺" },
            { 'Q', "𝗤" },
            { 'W', "𝗪" },
            { 'E', "𝗘" },
            { 'R', "𝗥" },
            { 'T', "𝗧" },
            { 'Y', "𝗬" },
            { 'U', "𝗨" },
            { 'I', "𝗜" },
            { 'O', "𝗢" },
            { 'P', "𝗣" },
            { 'A', "𝗔" },
            { 'S', "𝗦" },
            { 'D', "𝗗" },
            { 'F', "𝗙" },
            { 'G', "𝗚" },
            { 'H', "𝗛" },
            { 'J', "𝗝" },
            { 'K', "𝗞" },
            { 'L', "𝗟" },
            { 'Z', "𝗭" },
            { 'X', "𝗫" },
            { 'C', "𝗖" },
            { 'V', "𝗩" },
            { 'B', "𝗕" },
            { 'N', "𝗡" },
            { 'M', "𝗠" }
        };
        private readonly Dictionary<Char, String> CharSansItalic = new Dictionary<char, string>()
        {
            { '1', "𝟣" },
            { '2', "𝟤" },
            { '3', "𝟥" },
            { '4', "𝟦" },
            { '5', "𝟧" },
            { '6', "𝟨" },
            { '7', "𝟩" },
            { '8', "𝟪" },
            { '9', "𝟫" },
            { '0', "𝟢" },
            { 'q', "𝘲" },
            { 'w', "𝘸" },
            { 'e', "𝘦" },
            { 'r', "𝘳" },
            { 't', "𝘵" },
            { 'y', "𝘺" },
            { 'u', "𝘶" },
            { 'i', "𝘪" },
            { 'o', "𝘰" },
            { 'p', "𝘱" },
            { 'a', "𝘢" },
            { 's', "𝘴" },
            { 'd', "𝘥" },
            { 'f', "𝘧" },
            { 'g', "𝘨" },
            { 'h', "𝘩" },
            { 'j', "𝘫" },
            { 'k', "𝘬" },
            { 'l', "𝘭" },
            { 'z', "𝘻" },
            { 'x', "𝘹" },
            { 'c', "𝘤" },
            { 'v', "𝘷" },
            { 'b', "𝘣" },
            { 'n', "𝘯" },
            { 'm', "𝘮" },
            { 'Q', "𝘘" },
            { 'W', "𝘞" },
            { 'E', "𝘌" },
            { 'R', "𝘙" },
            { 'T', "𝘛" },
            { 'Y', "𝘠" },
            { 'U', "𝘜" },
            { 'I', "𝘐" },
            { 'O', "𝘖" },
            { 'P', "𝘗" },
            { 'A', "𝘈" },
            { 'S', "𝘚" },
            { 'D', "𝘋" },
            { 'F', "𝘍" },
            { 'G', "𝘎" },
            { 'H', "𝘏" },
            { 'J', "𝘑" },
            { 'K', "𝘒" },
            { 'L', "𝘓" },
            { 'Z', "𝘡" },
            { 'X', "𝘟" },
            { 'C', "𝘊" },
            { 'V', "𝘝" },
            { 'B', "𝘉" },
            { 'N', "𝘕" },
            { 'M', "𝘔" }
        };
        private readonly Dictionary<Char, String> CharSansBoldItalic = new Dictionary<char, string>()
        {
            { '1', "𝟭" },
            { '2', "𝟮" },
            { '3', "𝟯" },
            { '4', "𝟰" },
            { '5', "𝟱" },
            { '6', "𝟲" },
            { '7', "𝟳" },
            { '8', "𝟴" },
            { '9', "𝟵" },
            { '0', "𝟬" },
            { 'q', "𝙦" },
            { 'w', "𝙬" },
            { 'e', "𝙚" },
            { 'r', "𝙧" },
            { 't', "𝙩" },
            { 'y', "𝙮" },
            { 'u', "𝙪" },
            { 'i', "𝙞" },
            { 'o', "𝙤" },
            { 'p', "𝙥" },
            { 'a', "𝙖" },
            { 's', "𝙨" },
            { 'd', "𝙙" },
            { 'f', "𝙛" },
            { 'g', "𝙜" },
            { 'h', "𝙝" },
            { 'j', "𝙟" },
            { 'k', "𝙠" },
            { 'l', "𝙡" },
            { 'z', "𝙯" },
            { 'x', "𝙭" },
            { 'c', "𝙘" },
            { 'v', "𝙫" },
            { 'b', "𝙗" },
            { 'n', "𝙣" },
            { 'm', "𝙢" },
            { 'Q', "𝙌" },
            { 'W', "𝙒" },
            { 'E', "𝙀" },
            { 'R', "𝙍" },
            { 'T', "𝙏" },
            { 'Y', "𝙔" },
            { 'U', "𝙐" },
            { 'I', "𝙄" },
            { 'O', "𝙊" },
            { 'P', "𝙋" },
            { 'A', "𝘼" },
            { 'S', "𝙎" },
            { 'D', "𝘿" },
            { 'F', "𝙁" },
            { 'G', "𝙂" },
            { 'H', "𝙃" },
            { 'J', "𝙅" },
            { 'K', "𝙆" },
            { 'L', "𝙇" },
            { 'Z', "𝙕" },
            { 'X', "𝙓" },
            { 'C', "𝘾" },
            { 'V', "𝙑" },
            { 'B', "𝘽" },
            { 'N', "𝙉" },
            { 'M', "𝙈" }
        };
        private readonly Dictionary<Char, String> CharScript = new Dictionary<char, string>()
        {
            { '1', "𝟷" },
            { '2', "𝟸" },
            { '3', "𝟹" },
            { '4', "𝟺" },
            { '5', "𝟻" },
            { '6', "𝟼" },
            { '7', "𝟽" },
            { '8', "𝟾" },
            { '9', "𝟿" },
            { '0', "𝟶" },
            { 'q', "𝓆" },
            { 'w', "𝓌" },
            { 'e', "ℯ" },
            { 'r', "𝓇" },
            { 't', "𝓉" },
            { 'y', "𝓎" },
            { 'u', "𝓊" },
            { 'i', "𝒾" },
            { 'o', "ℴ" },
            { 'p', "𝓅" },
            { 'a', "𝒶" },
            { 's', "𝓈" },
            { 'd', "𝒹" },
            { 'f', "𝒻" },
            { 'g', "ℊ" },
            { 'h', "𝒽" },
            { 'j', "𝒿" },
            { 'k', "𝓀" },
            { 'l', "𝓁" },
            { 'z', "𝓏" },
            { 'x', "𝓍" },
            { 'c', "𝒸" },
            { 'v', "𝓋" },
            { 'b', "𝒷" },
            { 'n', "𝓃" },
            { 'm', "𝓂" },
            { 'Q', "𝒬" },
            { 'W', "𝒲" },
            { 'E', "ℰ" },
            { 'R', "ℛ" },
            { 'T', "𝒯" },
            { 'Y', "𝒴" },
            { 'U', "𝒰" },
            { 'I', "ℐ" },
            { 'O', "𝒪" },
            { 'P', "𝒫" },
            { 'A', "𝒜" },
            { 'S', "𝒮" },
            { 'D', "𝒟" },
            { 'F', "ℱ" },
            { 'G', "𝒢" },
            { 'H', "ℋ" },
            { 'J', "𝒥" },
            { 'K', "𝒦" },
            { 'L', "ℒ" },
            { 'Z', "𝒵" },
            { 'X', "𝒳" },
            { 'C', "𝒞" },
            { 'V', "𝒱" },
            { 'B', "ℬ" },
            { 'N', "𝒩" },
            { 'M', "ℳ" }
        };
        private readonly Dictionary<Char, String> CharScriptBold = new Dictionary<char, string>()
        {
            { '1', "𝟏" },
            { '2', "𝟐" },
            { '3', "𝟑" },
            { '4', "𝟒" },
            { '5', "𝟓" },
            { '6', "𝟔" },
            { '7', "𝟕" },
            { '8', "𝟖" },
            { '9', "𝟗" },
            { '0', "𝟎" },
            { 'q', "𝓺" },
            { 'w', "𝔀" },
            { 'e', "𝓮" },
            { 'r', "𝓻" },
            { 't', "𝓽" },
            { 'y', "𝔂" },
            { 'u', "𝓾" },
            { 'i', "𝓲" },
            { 'o', "𝓸" },
            { 'p', "𝓹" },
            { 'a', "𝓪" },
            { 's', "𝓼" },
            { 'd', "𝓭" },
            { 'f', "𝓯" },
            { 'g', "𝓰" },
            { 'h', "𝓱" },
            { 'j', "𝓳" },
            { 'k', "𝓴" },
            { 'l', "𝓵" },
            { 'z', "𝔃" },
            { 'x', "𝔁" },
            { 'c', "𝓬" },
            { 'v', "𝓿" },
            { 'b', "𝓫" },
            { 'n', "𝓷" },
            { 'm', "𝓶" },
            { 'Q', "𝓠" },
            { 'W', "𝓦" },
            { 'E', "𝓔" },
            { 'R', "𝓡" },
            { 'T', "𝓣" },
            { 'Y', "𝓨" },
            { 'U', "𝓤" },
            { 'I', "𝓘" },
            { 'O', "𝓞" },
            { 'P', "𝓟" },
            { 'A', "𝓐" },
            { 'S', "𝓢" },
            { 'D', "𝓓" },
            { 'F', "𝓕" },
            { 'G', "𝓖" },
            { 'H', "𝓗" },
            { 'J', "𝓙" },
            { 'K', "𝓚" },
            { 'L', "𝓛" },
            { 'Z', "𝓩" },
            { 'X', "𝓧" },
            { 'C', "𝓒" },
            { 'V', "𝓥" },
            { 'B', "𝓑" },
            { 'N', "𝓝" },
            { 'M', "𝓜" }
        };
        private readonly Dictionary<Char, String> CharFraktur = new Dictionary<char, string>()
        {
            { '1', "𝟷" },
            { '2', "𝟸" },
            { '3', "𝟹" },
            { '4', "𝟺" },
            { '5', "𝟻" },
            { '6', "𝟼" },
            { '7', "𝟽" },
            { '8', "𝟾" },
            { '9', "𝟿" },
            { '0', "𝟶" },
            { 'q', "𝔮" },
            { 'w', "𝔴" },
            { 'e', "𝔢" },
            { 'r', "𝔯" },
            { 't', "𝔱" },
            { 'y', "𝔶" },
            { 'u', "𝔲" },
            { 'i', "𝔦" },
            { 'o', "𝔬" },
            { 'p', "𝔭" },
            { 'a', "𝔞" },
            { 's', "𝔰" },
            { 'd', "𝔡" },
            { 'f', "𝔣" },
            { 'g', "𝔤" },
            { 'h', "𝔥" },
            { 'j', "𝔧" },
            { 'k', "𝔨" },
            { 'l', "𝔩" },
            { 'z', "𝔷" },
            { 'x', "𝔵" },
            { 'c', "𝔠" },
            { 'v', "𝔳" },
            { 'b', "𝔟" },
            { 'n', "𝔫" },
            { 'm', "𝔪" },
            { 'Q', "𝔔" },
            { 'W', "𝔚" },
            { 'E', "𝔈" },
            { 'R', "ℜ" },
            { 'T', "𝔗" },
            { 'Y', "𝔜" },
            { 'U', "𝔘" },
            { 'I', "ℑ" },
            { 'O', "𝔒" },
            { 'P', "𝔓" },
            { 'A', "𝔄" },
            { 'S', "𝔖" },
            { 'D', "𝔇" },
            { 'F', "𝔉" },
            { 'G', "𝔊" },
            { 'H', "ℌ" },
            { 'J', "𝔍" },
            { 'K', "𝔎" },
            { 'L', "𝔏" },
            { 'Z', "ℨ" },
            { 'X', "𝔛" },
            { 'C', "ℭ" },
            { 'V', "𝔙" },
            { 'B', "𝔅" },
            { 'N', "𝔑" },
            { 'M', "𝔐" }
        };
        private readonly Dictionary<Char, String> CharFrakturBold = new Dictionary<char, string>()
        {
            { '1', "𝟏" },
            { '2', "𝟐" },
            { '3', "𝟑" },
            { '4', "𝟒" },
            { '5', "𝟓" },
            { '6', "𝟔" },
            { '7', "𝟕" },
            { '8', "𝟖" },
            { '9', "𝟗" },
            { '0', "𝟎" },
            { 'q', "𝖖" },
            { 'w', "𝖜" },
            { 'e', "𝖊" },
            { 'r', "𝖗" },
            { 't', "𝖙" },
            { 'y', "𝖞" },
            { 'u', "𝖚" },
            { 'i', "𝖎" },
            { 'o', "𝖔" },
            { 'p', "𝖕" },
            { 'a', "𝖆" },
            { 's', "𝖘" },
            { 'd', "𝖉" },
            { 'f', "𝖋" },
            { 'g', "𝖌" },
            { 'h', "𝖍" },
            { 'j', "𝖏" },
            { 'k', "𝖐" },
            { 'l', "𝖑" },
            { 'z', "𝖟" },
            { 'x', "𝖝" },
            { 'c', "𝖈" },
            { 'v', "𝖛" },
            { 'b', "𝖇" },
            { 'n', "𝖓" },
            { 'm', "𝖒" },
            { 'Q', "𝕼" },
            { 'W', "𝖂" },
            { 'E', "𝕰" },
            { 'R', "𝕽" },
            { 'T', "𝕿" },
            { 'Y', "𝖄" },
            { 'U', "𝖀" },
            { 'I', "𝕴" },
            { 'O', "𝕺" },
            { 'P', "𝕻" },
            { 'A', "𝕬" },
            { 'S', "𝕾" },
            { 'D', "𝕯" },
            { 'F', "𝕱" },
            { 'G', "𝕲" },
            { 'H', "𝕳" },
            { 'J', "𝕵" },
            { 'K', "𝕶" },
            { 'L', "𝕷" },
            { 'Z', "𝖅" },
            { 'X', "𝖃" },
            { 'C', "𝕮" },
            { 'V', "𝖁" },
            { 'B', "𝕭" },
            { 'N', "𝕹" },
            { 'M', "𝕸" }
        };
        private readonly Dictionary<Char, String> CharMonospace = new Dictionary<char, string>()
        {
            { '1', "𝟷" },
            { '2', "𝟸" },
            { '3', "𝟹" },
            { '4', "𝟺" },
            { '5', "𝟻" },
            { '6', "𝟼" },
            { '7', "𝟽" },
            { '8', "𝟾" },
            { '9', "𝟿" },
            { '0', "𝟶" },
            { 'q', "𝚚" },
            { 'w', "𝚠" },
            { 'e', "𝚎" },
            { 'r', "𝚛" },
            { 't', "𝚝" },
            { 'y', "𝚢" },
            { 'u', "𝚞" },
            { 'i', "𝚒" },
            { 'o', "𝚘" },
            { 'p', "𝚙" },
            { 'a', "𝚊" },
            { 's', "𝚜" },
            { 'd', "𝚍" },
            { 'f', "𝚏" },
            { 'g', "𝚐" },
            { 'h', "𝚑" },
            { 'j', "𝚓" },
            { 'k', "𝚔" },
            { 'l', "𝚕" },
            { 'z', "𝚣" },
            { 'x', "𝚡" },
            { 'c', "𝚌" },
            { 'v', "𝚟" },
            { 'b', "𝚋" },
            { 'n', "𝚗" },
            { 'm', "𝚖" },
            { 'Q', "𝚀" },
            { 'W', "𝚆" },
            { 'E', "𝙴" },
            { 'R', "𝚁" },
            { 'T', "𝚃" },
            { 'Y', "𝚈" },
            { 'U', "𝚄" },
            { 'I', "𝙸" },
            { 'O', "𝙾" },
            { 'P', "𝙿" },
            { 'A', "𝙰" },
            { 'S', "𝚂" },
            { 'D', "𝙳" },
            { 'F', "𝙵" },
            { 'G', "𝙶" },
            { 'H', "𝙷" },
            { 'J', "𝙹" },
            { 'K', "𝙺" },
            { 'L', "𝙻" },
            { 'Z', "𝚉" },
            { 'X', "𝚇" },
            { 'C', "𝙲" },
            { 'V', "𝚅" },
            { 'B', "𝙱" },
            { 'N', "𝙽" },
            { 'M', "𝙼" }
        };

        //CharFullwidth
        private readonly Dictionary<Char, String> CharDoubleStruck = new Dictionary<char, string>()
        {
            { '1', "𝟙" },
            { '2', "𝟚" },
            { '3', "𝟛" },
            { '4', "𝟜" },
            { '5', "𝟝" },
            { '6', "𝟞" },
            { '7', "𝟟" },
            { '8', "𝟠" },
            { '9', "𝟡" },
            { '0', "𝟘" },
            { 'q', "𝕢" },
            { 'w', "𝕨" },
            { 'e', "𝕖" },
            { 'r', "𝕣" },
            { 't', "𝕥" },
            { 'y', "𝕪" },
            { 'u', "𝕦" },
            { 'i', "𝕚" },
            { 'o', "𝕠" },
            { 'p', "𝕡" },
            { 'a', "𝕒" },
            { 's', "𝕤" },
            { 'd', "𝕕" },
            { 'f', "𝕗" },
            { 'g', "𝕘" },
            { 'h', "𝕙" },
            { 'j', "𝕛" },
            { 'k', "𝕜" },
            { 'l', "𝕝" },
            { 'z', "𝕫" },
            { 'x', "𝕩" },
            { 'c', "𝕔" },
            { 'v', "𝕧" },
            { 'b', "𝕓" },
            { 'n', "𝕟" },
            { 'm', "𝕞" },
            { 'Q', "ℚ" },
            { 'W', "𝕎" },
            { 'E', "𝔼" },
            { 'R', "ℝ" },
            { 'T', "𝕋" },
            { 'Y', "𝕐" },
            { 'U', "𝕌" },
            { 'I', "𝕀" },
            { 'O', "𝕆" },
            { 'P', "ℙ" },
            { 'A', "𝔸" },
            { 'S', "𝕊" },
            { 'D', "𝔻" },
            { 'F', "𝔽" },
            { 'G', "𝔾" },
            { 'H', "ℍ" },
            { 'J', "𝕁" },
            { 'K', "𝕂" },
            { 'L', "𝕃" },
            { 'Z', "ℤ" },
            { 'X', "𝕏" },
            { 'C', "ℂ" },
            { 'V', "𝕍" },
            { 'B', "𝔹" },
            { 'N', "ℕ" },
            { 'M', "𝕄" }
        };
        private readonly Dictionary<Char, String> CharInverted = new Dictionary<char, string>()
        {
            { '!', "¡" },
            { '&', "⅋" },
            { 'q', "b" },
            { 'w', "ʍ" },
            { 'e', "ǝ" },
            { 'r', "ɹ" },
            { 't', "ʇ" },
            { 'y', "ʎ" },
            { 'u', "n" },
            { 'i', "ı" },
            { 'p', "d" },
            { 'a', "ɐ" },
            { 'd', "p" },
            { 'f', "ɟ" },
            { 'g', "ƃ" },
            { 'h', "ɥ" },
            { 'j', "ɾ" },
            { 'k', "ʞ" },
            { 'l', "ן" },
            { 'c', "ɔ" },
            { 'v', "ʌ" },
            { 'b', "q" },
            { 'n', "u" },
            { 'm', "ɯ" },
            { '\'', "," },
            { ',', "‘" },
            { '?', "¿" }
        };
        private readonly Dictionary<Char, String> CharCircled = new Dictionary<char, string>() {
            { '1', "①" },
            { '2', "②" },
            { '3', "③" },
            { '4', "④" },
            { '5', "⑤" },
            { '6', "⑥" },
            { '7', "⑦" },
            { '8', "⑧" },
            { '9', "⑨" },
            { '0', "⓪" },
            { '-', "⊖" },
            { '=', "⊜" },
            { '*', "⊛" },
            { '+', "⊕" },
            { 'q', "ⓠ" },
            { 'w', "ⓦ" },
            { 'e', "ⓔ" },
            { 'r', "ⓡ" },
            { 't', "ⓣ" },
            { 'y', "ⓨ" },
            { 'u', "ⓤ" },
            { 'i', "ⓘ" },
            { 'o', "ⓞ" },
            { 'p', "ⓟ" },
            { 'a', "ⓐ" },
            { 's', "ⓢ" },
            { 'd', "ⓓ" },
            { 'f', "ⓕ" },
            { 'g', "ⓖ" },
            { 'h', "ⓗ" },
            { 'j', "ⓙ" },
            { 'k', "ⓚ" },
            { 'l', "ⓛ" },
            { 'z', "ⓩ" },
            { 'x', "ⓧ" },
            { 'c', "ⓒ" },
            { 'v', "ⓥ" },
            { 'b', "ⓑ" },
            { 'n', "ⓝ" },
            { 'm', "ⓜ" },
            { '\\', "⦸" },
            { '.', "⨀" },
            { '/', "⊘" },
            { 'Q', "Ⓠ" },
            { 'W', "Ⓦ" },
            { 'E', "Ⓔ" },
            { 'R', "Ⓡ" },
            { 'T', "Ⓣ" },
            { 'Y', "Ⓨ" },
            { 'U', "Ⓤ" },
            { 'I', "Ⓘ" },
            { 'O', "Ⓞ" },
            { 'P', "Ⓟ" },
            { 'A', "Ⓐ" },
            { 'S', "Ⓢ" },
            { 'D', "Ⓓ" },
            { 'F', "Ⓕ" },
            { 'G', "Ⓖ" },
            { 'H', "Ⓗ" },
            { 'J', "Ⓙ" },
            { 'K', "Ⓚ" },
            { 'L', "Ⓛ" },
            { 'Z', "Ⓩ" },
            { 'X', "Ⓧ" },
            { 'C', "Ⓒ" },
            { 'V', "Ⓥ" },
            { 'B', "Ⓑ" },
            { 'N', "Ⓝ" },
            { 'M', "Ⓜ" },
            { '|', "⦶" },
            { '<', "⧀" },
            { '>', "⧁" }
        };
        private readonly Dictionary<Char, String> CharCircledInvert = new Dictionary<char, string>() {
            { '1', "①" },
            { '2', "②" },
            { '3', "③" },
            { '4', "④" },
            { '5', "⑤" },
            { '6', "⑥" },
            { '7', "⑦" },
            { '8', "⑧" },
            { '9', "⑨" },
            { '0', "⓿" },
            { '-', "⊖" },
            { '=', "⊜" },
            { '*', "⊛" },
            { '+', "⊕" },
            { '\\', "⦸" },
            { '.', "⨀" },
            { '/', "⊘" },
            { 'Q', "🅠" },
            { 'W', "🅦" },
            { 'E', "🅔" },
            { 'R', "🅡" },
            { 'T', "🅣" },
            { 'Y', "🅨" },
            { 'U', "🅤" },
            { 'I', "🅘" },
            { 'O', "🅞" },
            { 'P', "🅟" },
            { 'A', "🅐" },
            { 'S', "🅢" },
            { 'D', "🅓" },
            { 'F', "🅕" },
            { 'G', "🅖" },
            { 'H', "🅗" },
            { 'J', "🅙" },
            { 'K', "🅚" },
            { 'L', "🅛" },
            { 'Z', "🅩" },
            { 'X', "🅧" },
            { 'C', "🅒" },
            { 'V', "🅥" },
            { 'B', "🅑" },
            { 'N', "🅝" },
            { 'M', "🅜" },
            { '|', "⦶" },
            { '<', "⧀" },
            { '>', "⧁" }
        };
        private readonly Dictionary<Char, String> CharSquared = new Dictionary<char, string>()
        {
            { '1', "①" },
            { '2', "②" },
            { '3', "③" },
            { '4', "④" },
            { '5', "⑤" },
            { '6', "⑥" },
            { '7', "⑦" },
            { '8', "⑧" },
            { '9', "⑨" },
            { '0', "🄾" },
            { '-', "⊟" },
            { '=', "⊜" },
            { '*', "⧆" },
            { '+', "⊞" },
            { '\\', "⧅" },
            { '.', "⊡" },
            { '/', "⧄" },
            { 'Q', "🅀" },
            { 'W', "🅆" },
            { 'E', "🄴" },
            { 'R', "🅁" },
            { 'T', "🅃" },
            { 'Y', "🅈" },
            { 'U', "🅄" },
            { 'I', "🄸" },
            { 'O', "🄾" },
            { 'P', "🄿" },
            { 'A', "🄰" },
            { 'S', "🅂" },
            { 'D', "🄳" },
            { 'F', "🄵" },
            { 'G', "🄶" },
            { 'H', "🄷" },
            { 'J', "🄹" },
            { 'K', "🄺" },
            { 'L', "🄻" },
            { 'Z', "🅉" },
            { 'X', "🅇" },
            { 'C', "🄲" },
            { 'V', "🅅" },
            { 'B', "🄱" },
            { 'N', "🄽" },
            { 'M', "🄼" },
            { '|', "⦶" },
            { '<', "⧀" },
            { '>', "⧁" }
        };
        private readonly Dictionary<Char, String> CharSquaredInvert = new Dictionary<char, string>()
        {
            { '1', "①" },
            { '2', "②" },
            { '3', "③" },
            { '4', "④" },
            { '5', "⑤" },
            { '6', "⑥" },
            { '7', "⑦" },
            { '8', "⑧" },
            { '9', "⑨" },
            { '0', "🅾" },
            { '-', "⊟" },
            { '=', "⊜" },
            { '*', "⧆" },
            { '+', "⊞" },
            { '\\', "⧅" },
            { '.', "⊡" },
            { '/', "⧄" },
            { 'Q', "🆀" },
            { 'W', "🆆" },
            { 'E', "🅴" },
            { 'R', "🆁" },
            { 'T', "🆃" },
            { 'Y', "🆈" },
            { 'U', "🆄" },
            { 'I', "🅸" },
            { 'O', "🅾" },
            { 'P', "🅿" },
            { 'A', "🅰" },
            { 'S', "🆂" },
            { 'D', "🅳" },
            { 'F', "🅵" },
            { 'G', "🅶" },
            { 'H', "🅷" },
            { 'J', "🅹" },
            { 'K', "🅺" },
            { 'L', "🅻" },
            { 'Z', "🆉" },
            { 'X', "🆇" },
            { 'C', "🅲" },
            { 'V', "🆅" },
            { 'B', "🅱" },
            { 'N', "🅽" },
            { 'M', "🅼" },
            { '|', "⦶" },
            { '<', "⧀" },
            { '>', "⧁" }
        };
        private readonly Dictionary<Char, String> CharSmallCaps = new Dictionary<char, string>()
        {
            { '1', "¹" },
            { '2', "²" },
            { '3', "³" },
            { '4', "⁴" },
            { '5', "⁵" },
            { '6', "⁶" },
            { '7', "⁷" },
            { '8', "⁸" },
            { '9', "⁹" },
            { '0', "⁰" },
            { 'W', "ᴡ" },
            { 'E', "ᴇ" },
            { 'R', "ʀ" },
            { 'T', "ᴛ" },
            { 'U', "ᴜ" },
            { 'I', "ɪ" },
            { 'O', "ᴏ" },
            { 'P', "ᴩ" },
            { 'A', "ᴀ" },
            { 'S', "ꜱ" },
            { 'D', "ᴅ" },
            { 'F', "ꜰ" },
            { 'G', "ɢ" },
            { 'H', "ʜ" },
            { 'J', "ᴊ" },
            { 'K', "ᴋ" },
            { 'L', "ʟ" },
            { 'Z', "ᴢ" },
            { 'X', "x" },
            { 'C', "ᴄ" },
            { 'V', "ᴠ" },
            { 'B', "ʙ" },
            { 'N', "ɴ" },
            { 'M', "ᴍ" }
        };
        private readonly Dictionary<Char, String> CharSubscript = new Dictionary<char, string>()
        {
            { '1', "¹" },
            { '2', "²" },
            { '3', "³" },
            { '4', "⁴" },
            { '5', "⁵" },
            { '6', "⁶" },
            { '7', "⁷" },
            { '8', "⁸" },
            { '9', "⁹" },
            { '0', "⁰" },
            { 'w', "ʷ" },
            { 'e', "ᵉ" },
            { 'r', "ʳ" },
            { 't', "ᵗ" },
            { 'y', "ʸ" },
            { 'u', "ᵘ" },
            { 'i', "ⁱ" },
            { 'o', "ᵒ" },
            { 'p', "ᵖ" },
            { 'a', "ᵃ" },
            { 's', "ˢ" },
            { 'd', "ᵈ" },
            { 'f', "ᶠ" },
            { 'g', "ᵍ" },
            { 'h', "ʰ" },
            { 'j', "ʲ" },
            { 'k', "ᵏ" },
            { 'l', "ˡ" },
            { 'z', "ᶻ" },
            { 'x', "ˣ" },
            { 'c', "ᶜ" },
            { 'v', "ᵛ" },
            { 'b', "ᵇ" },
            { 'n', "ⁿ" },
            { 'm', "ᵐ" },
            { 'W', "ᵂ" },
            { 'E', "ᴱ" },
            { 'R', "ᴿ" },
            { 'T', "ᵀ" },
            { 'Y', "ʸ" },
            { 'U', "ᵁ" },
            { 'I', "ᴵ" },
            { 'O', "ᴼ" },
            { 'P', "ᴾ" },
            { 'A', "ᴬ" },
            { 'S', "ˢ" },
            { 'D', "ᴰ" },
            { 'F', "ᶠ" },
            { 'G', "ᴳ" },
            { 'H', "ᴴ" },
            { 'J', "ᴶ" },
            { 'K', "ᴷ" },
            { 'L', "ᴸ" },
            { 'Z', "ᶻ" },
            { 'X', "ˣ" },
            { 'C', "ᶜ" },
            { 'V', "ⱽ" },
            { 'B', "ᴮ" },
            { 'N', "ᴺ" },
            { 'M', "ᴹ" }
        };
        private readonly Dictionary<Char, String> CharParenthesized = new Dictionary<char, string>()
        {
            { '1', "⑴" },
            { '2', "⑵" },
            { '3', "⑶" },
            { '4', "⑷" },
            { '5', "⑸" },
            { '6', "⑹" },
            { '7', "⑺" },
            { '8', "⑻" },
            { '9', "⑼" },
            { '0', "⒪" },
            { 'q', "⒬" },
            { 'w', "⒲" },
            { 'e', "⒠" },
            { 'r', "⒭" },
            { 't', "⒯" },
            { 'y', "⒴" },
            { 'u', "⒰" },
            { 'i', "⒤" },
            { 'o', "⒪" },
            { 'p', "⒫" },
            { 'a', "⒜" },
            { 's', "⒮" },
            { 'd', "⒟" },
            { 'f', "⒡" },
            { 'g', "⒢" },
            { 'h', "⒣" },
            { 'j', "⒥" },
            { 'k', "⒦" },
            { 'l', "⒧" },
            { 'z', "⒵" },
            { 'x', "⒳" },
            { 'c', "⒞" },
            { 'v', "⒱" },
            { 'b', "⒝" },
            { 'n', "⒩" },
            { 'm', "⒨" }
        };
        //CharMixed
        private readonly Dictionary<Char, String> CharExtraThicc = new Dictionary<char, string>() {
            //{ 'Q', "Ｑ" },
            { 'W', "Щ" },
            { 'E', "乇" },
            { 'R', "尺" },
            { 'T', "ㄒ" },
            { 'Y', "Ч" },
            { 'U', "Ц" },
            { 'I', "丨" },
            { 'O', "σ" },
            { 'P', "ρ" },
            { 'A', "卂" },
            { 'S', "丂" },
            //{ 'D', "Ｄ" },
            { 'F', "ቻ" },
            { 'G', "Б" },
            { 'H', "卄" },
            { 'J', "ﾌ" },
            { 'K', "ズ" },
            { 'L', "ረ" },
            { 'Z', "乙" },
            { 'X', "乂" },
            { 'C', "匚" },
            //{ 'V', "Ｖ" },
            { 'B', "乃" },
            { 'N', "刀" },
            { 'M', "ጠ" }
        };

        //CharZalgo
        //CharTrademark
        private readonly Dictionary<Char, String> CharNibba = new Dictionary<char, string>()
        {
            { 'B', "🅱" }
        };
        private readonly Dictionary<Char, String> CharAE = new Dictionary<char, string>()
        {
            { 'E', "Æ" },
            { 'e', "æ" },
            { '?', "‽" }
        };
        private readonly Dictionary<Char, String> CharNumberspeak = new Dictionary<char, string>()
        {
            { 'e', "3" },
            { 't', "7" },
            { 'i', "!" },
            { 'o', "0" },
            { 'a', "4" },
            { 's', "5" },
            { 'g', "9" },
            { 'l', "1" },
            { 'z', "2" },
            { 'c', "(" },
            { 'b', "8" }
        };
        private readonly Dictionary<Char, String> CharBlankBanshee = new Dictionary<char, string>()
        {
            { 'E', "Σ" },
            { 'C', "Ↄ" },
            { 'A', "Λ" },
            { '<', "◁" },
            { '>', "▷" }
        };
        //CharRandomcase

        private bool working = false;
        private bool save = false;

        public Textify()
        {
            InitializeComponent();
            
            try
            {
                if (File.Exists("sliders"))
                {
                    StreamReader file = new StreamReader("sliders");
                    Int32  .TryParse(file.ReadLine(), out int  intensity);
                    Boolean.TryParse(file.ReadLine(), out bool top      );
                    Boolean.TryParse(file.ReadLine(), out bool mid      );
                    Boolean.TryParse(file.ReadLine(), out bool buttom   );
                    file.Close();
                    zalgo_intensity.Value = Math.Max(Math.Min(intensity, 3), 1);
                    zalgo_top   .Checked = top   ;
                    zalgo_middle.Checked = mid   ;
                    zalgo_buttom.Checked = buttom;
                }
            }
            catch { }
            working = true;

            Labler();
        }

        private void Txt_TextChanged(object sender, EventArgs e)
        {
            DelayedUpdate.Stop();
            DelayedUpdate.Start();
        }

        public static string ToFullWidth(string halfWidth)
        {
            StringBuilder sb = new StringBuilder(256);
            LCMapString(LOCALE_SYSTEM_DEFAULT, LCMAP_FULLWIDTH, halfWidth, -1, sb, sb.Capacity);
            return sb.ToString();
        }

        public string Cnvrt(string cyrillic, Dictionary<Char, String> dicc, bool isFullwidth)
        {
            StringBuilder result = new StringBuilder();
            foreach (char c in cyrillic)
            {
                if (dicc.ContainsKey(c))
                {
                    result.Append(dicc[c]);
                }
                else
                {
                    if (isFullwidth)
                    {
                        result.Append(ToFullWidth(c.ToString())[0]);
                    }
                    else
                    {
                        result.Append(c);
                    }
                }
            }
            return result.ToString();
        }

        public string RndmCnvrt(string cyrillic)
        {
            cyrillic = cyrillic.ToLower();
            if (RandNumber(0, 2) == 1)
            {
                cyrillic = cyrillic.Replace("tm", "™");
            }
            if (RandNumber(0, 2) == 1)
            {
                cyrillic = cyrillic.Replace("sm", "℠");
            }

            StringBuilder result = new StringBuilder();
            foreach (char ch in cyrillic)
            {
                if ((ch == '™') || (ch == '℠'))
                {
                    result.Append(ch);
                }
                else
                {
                    result.Append(RandomConvertChar(ch, 23));
                }
            }
            return result.ToString();
        }

        private string RandomConvertChar(char ch, int chance)
        {
            char c = RandomcharTru(ch);

            while (true)
            {
                switch (RandNumber(0, 23))
                {
                    case 0:
                        if (CharSerifBold.ContainsKey(c))
                        {
                            return CharSerifBold[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 1:
                        if (CharSerifItalic.ContainsKey(c))
                        {
                            return CharSerifItalic[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 2:
                        if (CharSerifBoldItalic.ContainsKey(c))
                        {
                            return CharSerifBoldItalic[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 3:
                        if (CharSans.ContainsKey(c))
                        {
                            return CharSans[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 4:
                        if (CharSansBold.ContainsKey(c))
                        {
                            return CharSansBold[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 5:
                        if (CharSansItalic.ContainsKey(c))
                        {
                            return CharSansItalic[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 6:
                        if (CharSansBoldItalic.ContainsKey(c))
                        {
                            return CharSansBoldItalic[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 7:
                        if (CharScript.ContainsKey(c))
                        {
                            return CharScript[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 8:
                        if (CharScriptBold.ContainsKey(c))
                        {
                            return CharScriptBold[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 9:
                        if (CharFraktur.ContainsKey(c))
                        {
                            return CharFraktur[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 10:
                        if (CharFrakturBold.ContainsKey(c))
                        {
                            return CharFrakturBold[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 11:
                        if (CharMonospace.ContainsKey(c))
                        {
                            return CharMonospace[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 12:
                        return ToFullWidth(c.ToString())[0].ToString();
                    case 13:
                        if (CharDoubleStruck.ContainsKey(c))
                        {
                            return CharDoubleStruck[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 14:
                        if (CharCircled.ContainsKey(c.ToString().ToUpper()[0]))
                        {
                            return CharCircled[c.ToString().ToUpper()[0]];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 15:
                        if (CharCircledInvert.ContainsKey(c.ToString().ToUpper()[0]))
                        {
                            return CharCircledInvert[c.ToString().ToUpper()[0]];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 16:
                        if (CharSquared.ContainsKey(c.ToString().ToUpper()[0]))
                        {
                            return CharSquared[c.ToString().ToUpper()[0]];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 17:
                        if (CharSquaredInvert.ContainsKey(c.ToString().ToUpper()[0]))
                        {
                            return CharSquaredInvert[c.ToString().ToUpper()[0]];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 18:
                        if (CharSmallCaps.ContainsKey(c.ToString().ToUpper()[0]))
                        {
                            return CharSmallCaps[c.ToString().ToUpper()[0]];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 19:
                        if (CharSubscript.ContainsKey(c))
                        {
                            return CharSubscript[c];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 20:
                        if (CharParenthesized.ContainsKey(c.ToString().ToLower()[0]))
                        {
                            return CharParenthesized[c.ToString().ToLower()[0]];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 21:
                        if (CharExtraThicc.ContainsKey(c.ToString().ToUpper()[0]))
                        {
                            return CharExtraThicc[c.ToString().ToUpper()[0]];
                        }
                        else
                        {
                            if (RandNumber(0, chance) == 0)
                            {
                                return c.ToString();
                            }
                            else
                            {
                                break;
                            }
                        }
                    case 22:
                        return c.ToString();
                    default:
                        return "#";
                }
            }
        }

        [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]
        private static extern int LCMapString(uint Locale, uint dwMapFlags, string lpSrcStr, int cchSrc, StringBuilder lpDestStr, int cchDest);

        private void Generator_Click(object sender, EventArgs e)
        {
            Generator bob = new Generator();
            bob.ShowDialog();
        }
        
        private string RandomcaseFak(string txt)
        {
            int length = RandNumber(0, 3);
            int pos = 0;
            bool cas = RandNumber(0, 3) == 0;
            StringBuilder result = new StringBuilder();
            foreach (char c in txt)
            {
                if (c == ' ')
                {
                    result.Append(" ");
                    cas = RandNumber(0, 2) == 0;
                    length = RandNumber(0, 3);
                    pos = 0;
                }
                else
                {
                    if (pos > length)
                    {
                        length = RandNumber(0, 3);
                        pos = 0;
                        cas = !cas;
                    }
                    else
                    {
                        pos++;
                    }

                    if (cas)
                    {
                        result.Append(c.ToString().ToUpper());
                    }
                    else
                    {
                        result.Append(c.ToString().ToLower());
                    }
                }
            }
            return result.ToString();
        }

        private char RandomcharTru(char txt)
        {
            if (RandNumber(0, 2) == 0)
            {
                txt = txt.ToString().ToUpper()[0];
            }
            else
            {
                txt = txt.ToString().ToLower()[0];
            }
            return txt;
        }

        public static int RandNumber(int Low, int High)
        {
            Random rndNum = new Random(int.Parse(Guid.NewGuid().ToString().Substring(0, 8), System.Globalization.NumberStyles.HexNumber));

            int rnd = rndNum.Next(Low, High);

            return rnd;
        }

        private void Copy()
        {
            if (c_txt.Text != "")
            {
                foreach (Control control in Controls)
                {
                    if (control is RadioButton)
                    {
                        RadioButton radio = control as RadioButton;
                        if (radio.Checked)
                        {
                            Clipboard.SetText(radio.Text);
                        }
                    }
                }
            }
        }

        private void CopyHandler(object sender, EventArgs e)
        {
            Copy();
        }

        private void Labler()
        {
            c_serifbold.Text = "𝐒𝐞𝐫𝐢𝐟 𝐁𝐨𝐥𝐝";
            c_serifitalic.Text = "𝑆𝑒𝑟𝑖𝑓 𝐼𝑡𝑎𝑙𝑖𝑐";
            c_serifbolditalic.Text = "𝑺𝒆𝒓𝒊𝒇 𝑩𝒐𝒍𝒅 𝑰𝒕𝒂𝒍𝒊𝒄";
            c_sans.Text = "𝖲𝖺𝗇𝗌";
            c_sansbold.Text = "𝗦𝗮𝗻𝘀 𝗕𝗼𝗹𝗱";
            c_sansitalic.Text = "𝘚𝘢𝘯𝘴 𝘐𝘵𝘢𝘭𝘪𝘤";
            c_sansbolditalic.Text = "𝙎𝙖𝙣𝙨 𝘽𝙤𝙡𝙙 𝙄𝙩𝙖𝙡𝙞𝙘";
            c_script.Text = "𝒮𝒸𝓇𝒾𝓅𝓉";
            c_scriptbold.Text = "𝓢𝓬𝓻𝓲𝓹𝓽 𝓑𝓸𝓵𝓭";
            c_fraktur.Text = "𝔉𝔯𝔞𝔨𝔱𝔲𝔯";
            c_frakturbold.Text = "𝕱𝖗𝖆𝖐𝖙𝖚𝖗 𝕭𝖔𝖑𝖉";

            c_monospace.Text = "𝙼𝚘𝚗𝚘𝚜𝚙𝚊𝚌𝚎";
            c_fullwidth.Text = "Ｆｕｌｌｗｉｄｔｈ";
            c_doublestruck.Text = "𝔻𝕠𝕦𝕓𝕝𝕖-𝕊𝕥𝕣𝕦𝕔𝕜";
            c_inverted.Text = "pǝʇɹǝʌuı";
            c_circled.Text = "Ⓒⓘⓡⓒⓛⓔⓓ";
            c_circledinvert.Text = "🅒🅘🅡🅒🅛🅔🅓 🅑🅛🅐🅒🅚";
            c_squared.Text = "🅂🅀🅄🄰🅁🄴🄳";
            c_squaredinvert.Text = "🆂🆀🆄🅰🆁🅴🅳 🅱🅻🅰🅲🅺";
            c_smallcaps.Text = "ꜱᴍᴀʟʟ ᴄᴀᴩꜱ";
            c_subscript.Text = "ˢᵘᵇˢᶜʳⁱᵖᵗ";
            c_parenthesized.Text = "⒫⒜⒭⒠⒩⒯⒣⒠⒮⒤⒵⒠⒟";
            c_mixed.Text = RndmCnvrt("mixed");
            c_extrathicc.Text = "乇乂ㄒ尺卂 ㄒ卄丨匚匚";
            
            c_zalgo.Text = Zalgo.ToZalgo("Zalgo", zalgo_intensity.Value, zalgo_top.Checked, zalgo_middle.Checked, zalgo_buttom.Checked);
            c_tm.Text = "Trademark™";
            c_nibba.Text = "Ni🅱🅱a";
            c_ae.Text = "LÆMON‽";

            c_numberspeak.Text = "num83r5p34k";
            c_blankbanshee.Text = "BLΛNK BΛNSHΣΣ";
            c_randomcase.Text = RandomcaseFak("randomcase");
        }

        private void Zalgo_Refresh(object sender, EventArgs e)
        {
            if (working)
            {
                if (c_txt.Text == "")
                {
                    c_zalgo.Text = Zalgo.ToZalgo("Zalgo", zalgo_intensity.Value * 0.5f, zalgo_top.Checked, zalgo_middle.Checked, zalgo_buttom.Checked);
                }
                else
                {
                    c_zalgo.Text = Zalgo.ToZalgo(c_txt.Text, zalgo_intensity.Value * 0.5f, zalgo_top.Checked, zalgo_middle.Checked, zalgo_buttom.Checked);
                }
                Copy();

                if (save)
                {
                    StreamWriter file = new StreamWriter("sliders");
                    file.WriteLine(zalgo_intensity.Value);
                    file.WriteLine(zalgo_top.Checked);
                    file.WriteLine(zalgo_middle.Checked);
                    file.WriteLine(zalgo_buttom.Checked);
                    file.Close();
                }
            }
        }

        private void DelayedUpdate_Tick(object sender, EventArgs e)
        {
            DelayedUpdate.Stop();
            if (c_txt.Text == "")
            {
                Labler();
            }
            else
            {
                c_serifbold.Text       = Cnvrt(c_txt.Text, CharSerifBold, false);
                c_serifitalic.Text     = Cnvrt(c_txt.Text, CharSerifItalic, false);
                c_serifbolditalic.Text = Cnvrt(c_txt.Text, CharSerifBoldItalic, false);
                c_sans.Text            = Cnvrt(c_txt.Text, CharSans, false);
                c_sansbold.Text        = Cnvrt(c_txt.Text, CharSansBold, false);
                c_sansitalic.Text      = Cnvrt(c_txt.Text, CharSansItalic, false);
                c_sansbolditalic.Text  = Cnvrt(c_txt.Text, CharSansBoldItalic, false);
                c_script.Text          = Cnvrt(c_txt.Text, CharScript, false);
                c_scriptbold.Text      = Cnvrt(c_txt.Text, CharScriptBold, false);
                c_fraktur.Text         = Cnvrt(c_txt.Text, CharFraktur, false);
                c_frakturbold.Text     = Cnvrt(c_txt.Text, CharFrakturBold, false);
                c_monospace.Text       = Cnvrt(c_txt.Text, CharMonospace, true);

                c_fullwidth.Text       = ToFullWidth(c_txt.Text);
                c_doublestruck.Text    = Cnvrt(c_txt.Text, CharDoubleStruck, true);
                c_inverted.Text        = Cnvrt(new String(c_txt.Text.ToLower().Reverse().ToArray()), CharInverted, false);
                c_circled.Text         = Cnvrt(c_txt.Text, CharCircled, true);
                c_circledinvert.Text   = Cnvrt(c_txt.Text.ToUpper(), CharCircledInvert, false);
                c_squared.Text         = Cnvrt(c_txt.Text.ToUpper(), CharSquared, true);
                c_squaredinvert.Text   = Cnvrt(c_txt.Text.ToUpper(), CharSquaredInvert, false);
                c_smallcaps.Text       = Cnvrt(c_txt.Text.ToUpper(), CharSmallCaps, false);
                c_subscript.Text       = Cnvrt(c_txt.Text, CharSubscript, false);
                c_parenthesized.Text   = Cnvrt(c_txt.Text.ToLower(), CharParenthesized, false);
                c_mixed.Text           = RndmCnvrt(c_txt.Text);
                c_extrathicc.Text      = Cnvrt(c_txt.Text.ToUpper(), CharExtraThicc, true);

                c_zalgo.Text           = Zalgo.ToZalgo(c_txt.Text, zalgo_intensity.Value, zalgo_top.Checked, zalgo_middle.Checked, zalgo_buttom.Checked);
                c_tm.Text              = c_txt.Text + "™";
                c_nibba.Text           = Cnvrt(c_txt.Text, CharNibba, false);
                c_ae.Text              = Cnvrt(c_txt.Text, CharAE, false);
                c_numberspeak.Text     = Cnvrt(c_txt.Text.ToLower(), CharNumberspeak, false);
                c_blankbanshee.Text    = Cnvrt(c_txt.Text.ToUpper(), CharBlankBanshee, false);
                c_randomcase.Text      = RandomcaseFak(c_txt.Text);

                if (c_txt.Text.ToLower() == "generator")
                {
                    c_generator.Visible = true;
                    c_txt.Size = new System.Drawing.Size(Size.Width - 141, 27);
                }
                else
                {
                    if (c_generator.Visible)
                    {
                        c_generator.Visible = false;
                        c_txt.Size = new System.Drawing.Size(Size.Width - 46, 27);
                    }
                }
            }

            Copy();
        }
        
        private void Halp_Click(object sender, EventArgs e)
        {
            Instructions bob = new Instructions();
            bob.ShowDialog();
        }
    }

    public static class Zalgo
    {
        static readonly Random Rnd = new Random();

        //those go UP
        public static char[] ZalgoUp = {
    '\u030d', /*     Ì     */		'\u030e', /*     ÌŽ     */		'\u0304', /*     Ì„     */		'\u0305', /*     Ì…     */
	'\u033f', /*     Ì¿     */		'\u0311', /*     Ì‘     */		'\u0306', /*     Ì†     */		'\u0310', /*     Ì     */
	'\u0352', /*     Í’     */		'\u0357', /*     Í—     */		'\u0351', /*     Í‘     */		'\u0307', /*     Ì‡     */
	'\u0308', /*     Ìˆ     */		'\u030a', /*     ÌŠ     */		'\u0342', /*     Í‚     */		'\u0343', /*     Ì“     */
	'\u0344', /*     ÌˆÌ     */		'\u034a', /*     ÍŠ     */		'\u034b', /*     Í‹     */		'\u034c', /*     ÍŒ     */
	'\u0303', /*     Ìƒ     */		'\u0302', /*     Ì‚     */		'\u030c', /*     ÌŒ     */		'\u0350', /*     Í     */
	'\u0300', /*     Ì€     */		'\u0301', /*     Ì     */		'\u030b', /*     Ì‹     */		'\u030f', /*     Ì     */
	'\u0312', /*     Ì’     */		'\u0313', /*     Ì“     */		'\u0314', /*     Ì”     */		'\u033d', /*     Ì½     */
	'\u0309', /*     Ì‰     */		'\u0363', /*     Í£     */		'\u0364', /*     Í¤     */		'\u0365', /*     Í¥     */
	'\u0366', /*     Í¦     */		'\u0367', /*     Í§     */		'\u0368', /*     Í¨     */		'\u0369', /*     Í©     */
	'\u036a', /*     Íª     */		'\u036b', /*     Í«     */		'\u036c', /*     Í¬     */		'\u036d', /*     Í­     */
	'\u036e', /*     Í®     */		'\u036f', /*     Í¯     */		'\u033e', /*     Ì¾     */		'\u035b', /*     Í›     */
	'\u0346', /*     Í†     */		'\u031a' /*     Ìš     */
                };

        //those go DOWN
        public static char[] ZalgoDown = {
    '\u0316', /*     Ì–     */		'\u0317', /*     Ì—     */		'\u0318', /*     Ì˜     */		'\u0319', /*     Ì™     */
	'\u031c', /*     Ìœ     */		'\u031d', /*     Ì     */		'\u031e', /*     Ìž     */		'\u031f', /*     ÌŸ     */
	'\u0320', /*     Ì      */		'\u0324', /*     Ì¤     */		'\u0325', /*     Ì¥     */		'\u0326', /*     Ì¦     */
	'\u0329', /*     Ì©     */		'\u032a', /*     Ìª     */		'\u032b', /*     Ì«     */		'\u032c', /*     Ì¬     */
	'\u032d', /*     Ì­     */		'\u032e', /*     Ì®     */		'\u032f', /*     Ì¯     */		'\u0330', /*     Ì°     */
	'\u0331', /*     Ì±     */		'\u0332', /*     Ì²     */		'\u0333', /*     Ì³     */		'\u0339', /*     Ì¹     */
	'\u033a', /*     Ìº     */		'\u033b', /*     Ì»     */		'\u033c', /*     Ì¼     */		'\u0345', /*     Í…     */
	'\u0347', /*     Í‡     */		'\u0348', /*     Íˆ     */		'\u0349', /*     Í‰     */		'\u034d', /*     Í     */
	'\u034e', /*     ÍŽ     */		'\u0353', /*     Í“     */		'\u0354', /*     Í”     */		'\u0355', /*     Í•     */
	'\u0356', /*     Í–     */		'\u0359', /*     Í™     */		'\u035a', /*     Íš     */		'\u0323' /*     Ì£     */
                    };

        //those always stay in the middle
        public static char[] ZalgoMid = {
    '\u0315', /*     Ì•     */		'\u031b', /*     Ì›     */		'\u0340', /*     Ì€     */		'\u0341', /*     Ì     */
	'\u0358', /*     Í˜     */		'\u0321', /*     Ì¡     */		'\u0322', /*     Ì¢     */		'\u0327', /*     Ì§     */
	'\u0328', /*     Ì¨     */		'\u0334', /*     Ì´     */		'\u0335', /*     Ìµ     */		'\u0336', /*     Ì¶     */
	'\u034f', /*     Í     */		'\u035c', /*     Íœ     */		'\u035d', /*     Í     */		'\u035e', /*     Íž     */
	'\u035f', /*     ÍŸ     */		'\u0360', /*     Í      */		'\u0362', /*     Í¢     */		'\u0338', /*     Ì¸     */
	//'\u0337', /*     Ì·     */		'\u0361', /*     Í¡     */		'\u0489' /*     Ò‰_     */		
                };

        public static bool IsZalgoChar(char c)
        {
            if (ZalgoDown.Contains(c) ||
                ZalgoMid.Contains(c) ||
                ZalgoUp.Contains(c))
                return true;
            return false;
        }

        public enum ZalgoSize
        {
            Mini, Normal, Maxi
        }

        public static string ToZalgo(this string text, float size = 2, bool top = true, bool mid = true, bool buttom = true)
        {
            var newtxt = "";

            for (var i = 0; i < text.Length; i++)
            {
                if (IsZalgoChar(text.ToCharArray()[i]))
                    continue;

                newtxt += text.ToCharArray()[i];
                newtxt += GetZalgo(size, top, mid, buttom);
            }

            return newtxt;
        }

        public static string GetZalgo(float size = 2, bool top = true, bool mid = true, bool buttom = true)
        {
            var newtxt = "";
            var numUp = 0;
            var numMid = 0;
            var numDown = 0;
            size = Math.Max(size, 1);
            try
            {
                if (top)
                {
                    numUp = (int)(Rnd.Next(1, (int)(Math.Pow(2, size + 2))) / Math.Pow(2, size - 1) + Math.Max(size * 2, 0));
                }
                if (mid)
                {
                    numMid = (int)(Rnd.Next(1, (int)((size * 5 - 3) / Math.Pow(2, size - 1))) + Math.Max((size - 1) * 2, 0));
                }
                if (buttom)
                {
                    numDown = (int)(Rnd.Next(1, (int)(Math.Pow(2, size + 2) / Math.Pow(2, size - 1))) + Math.Max(size * 2, 0));
                }
            }
            catch { }

            /*
            switch (size)
            {
                case 1:
                    if (top)
                    {
                        numUp = Rnd.Next(1, 8);
                    }
                    if (mid)
                    {
                        numMid = Rnd.Next(1, 2);
                    }
                    if (buttom)
                    {
                        numDown = Rnd.Next(1, 8);
                    }
                    break;
                case 2:
                    if (top)
                    {
                        numUp = Rnd.Next(1, 16) / 2 + 1;
                    }
                    if (mid)
                    {
                        numMid = Rnd.Next(1, 6) / 2;
                    }
                    if (buttom)
                    {
                        numDown = Rnd.Next(1, 16) / 2 + 1;
                    }
                    break;
                case 3:
                    if (top)
                    {
                        numUp = Rnd.Next(1, 64) / 4 + 3;
                    }
                    if (mid)
                    {
                        numMid = Rnd.Next(1, 16) / 4 + 1;
                    }
                    if (buttom)
                    {
                        numDown = Rnd.Next(1, 64) / 4 + 3;
                    }
                    break;
            }
            */

            if (top   )
            {
                for (var j = 0; j < numUp; j++)
                {
                    newtxt += RandZalgo(ZalgoUp);
                }
            }
            if (mid   )
            {
                for (var j = 0; j < numMid; j++)
                {
                    newtxt += RandZalgo(ZalgoMid);
                }
            }
            if (buttom)
            {
                for (var j = 0; j < numDown; j++)
                {
                    newtxt += RandZalgo(ZalgoDown);
                }
            }


            return newtxt;
        }


        static char RandZalgo(IList<char> set)
        {
            var r = Rnd.Next(1, set.Count);
            return set[r];
        }
    }
}
